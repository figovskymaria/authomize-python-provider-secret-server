"""
    Secret Server Rest API

    REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 11.2.2
    Contact: info@authomize.com
    Generated by: https://openapi-generator.tech
"""


import sys
import unittest

import plugins
from plugins.model.configuration_advanced_model import ConfigurationAdvancedModel
from plugins.model.configuration_application_settings_model import ConfigurationApplicationSettingsModel
from plugins.model.configuration_email_model import ConfigurationEmailModel
from plugins.model.configuration_folders_model import ConfigurationFoldersModel
from plugins.model.configuration_launcher_settings_model import ConfigurationLauncherSettingsModel
from plugins.model.configuration_local_user_passwords_model import ConfigurationLocalUserPasswordsModel
from plugins.model.configuration_login_model import ConfigurationLoginModel
from plugins.model.configuration_permission_options_model import ConfigurationPermissionOptionsModel
from plugins.model.configuration_protocol_handler_settings_model import ConfigurationProtocolHandlerSettingsModel
from plugins.model.configuration_saml_model import ConfigurationSamlModel
from plugins.model.configuration_security_model import ConfigurationSecurityModel
from plugins.model.configuration_session_recording_model import ConfigurationSessionRecordingModel
from plugins.model.configuration_ssh_command_export_model import ConfigurationSshCommandExportModel
from plugins.model.configuration_ticket_system_model import ConfigurationTicketSystemModel
from plugins.model.configuration_user_experience_model import ConfigurationUserExperienceModel
from plugins.model.configuration_user_interface_model import ConfigurationUserInterfaceModel
from plugins.model.license_model import LicenseModel
globals()['ConfigurationAdvancedModel'] = ConfigurationAdvancedModel
globals()['ConfigurationApplicationSettingsModel'] = ConfigurationApplicationSettingsModel
globals()['ConfigurationEmailModel'] = ConfigurationEmailModel
globals()['ConfigurationFoldersModel'] = ConfigurationFoldersModel
globals()['ConfigurationLauncherSettingsModel'] = ConfigurationLauncherSettingsModel
globals()['ConfigurationLocalUserPasswordsModel'] = ConfigurationLocalUserPasswordsModel
globals()['ConfigurationLoginModel'] = ConfigurationLoginModel
globals()['ConfigurationPermissionOptionsModel'] = ConfigurationPermissionOptionsModel
globals()['ConfigurationProtocolHandlerSettingsModel'] = ConfigurationProtocolHandlerSettingsModel
globals()['ConfigurationSamlModel'] = ConfigurationSamlModel
globals()['ConfigurationSecurityModel'] = ConfigurationSecurityModel
globals()['ConfigurationSessionRecordingModel'] = ConfigurationSessionRecordingModel
globals()['ConfigurationSshCommandExportModel'] = ConfigurationSshCommandExportModel
globals()['ConfigurationTicketSystemModel'] = ConfigurationTicketSystemModel
globals()['ConfigurationUserExperienceModel'] = ConfigurationUserExperienceModel
globals()['ConfigurationUserInterfaceModel'] = ConfigurationUserInterfaceModel
globals()['LicenseModel'] = LicenseModel
from plugins.model.secret_server_settings_model import SecretServerSettingsModel


class TestSecretServerSettingsModel(unittest.TestCase):
    """SecretServerSettingsModel unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def testSecretServerSettingsModel(self):
        """Test SecretServerSettingsModel"""
        # FIXME: construct object with mandatory attributes with example values
        # model = SecretServerSettingsModel()  # noqa: E501
        pass


if __name__ == '__main__':
    unittest.main()
