"""
    Secret Server Rest API

    REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 11.2.2
    Contact: info@authomize.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from plugins.api_client import ApiClient, Endpoint as _Endpoint
from plugins.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from plugins.model.authentication_failed_response import AuthenticationFailedResponse
from plugins.model.bad_request_response import BadRequestResponse
from plugins.model.categorized_list_create_args import CategorizedListCreateArgs
from plugins.model.categorized_list_delete_model import CategorizedListDeleteModel
from plugins.model.categorized_list_item_create_args import CategorizedListItemCreateArgs
from plugins.model.categorized_list_item_create_with_file_args import CategorizedListItemCreateWithFileArgs
from plugins.model.categorized_list_item_delete_model import CategorizedListItemDeleteModel
from plugins.model.categorized_list_item_single_create_args import CategorizedListItemSingleCreateArgs
from plugins.model.categorized_list_item_single_update_args import CategorizedListItemSingleUpdateArgs
from plugins.model.categorized_list_item_update_args import CategorizedListItemUpdateArgs
from plugins.model.categorized_list_model import CategorizedListModel
from plugins.model.categorized_list_update_args import CategorizedListUpdateArgs
from plugins.model.internal_server_error_response import InternalServerErrorResponse
from plugins.model.paging_of_categorized_list_audit_model import PagingOfCategorizedListAuditModel
from plugins.model.paging_of_categorized_list_item_model import PagingOfCategorizedListItemModel
from plugins.model.paging_of_categorized_list_item_view_model import PagingOfCategorizedListItemViewModel
from plugins.model.paging_of_categorized_list_summary import PagingOfCategorizedListSummary
from plugins.model.paging_of_simple_categorized_list import PagingOfSimpleCategorizedList
from plugins.model.paging_of_string import PagingOfString


class CategorizedListsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.categorized_lists_service_add_item_to_list_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfCategorizedListItemViewModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}/options/single',
                'operation_id': 'categorized_lists_service_add_item_to_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                    'categorized_list_item_single_create_args',
                ],
                'required': [
                    'categorized_list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'categorized_list_item_single_create_args':
                        (CategorizedListItemSingleCreateArgs,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                    'categorized_list_item_single_create_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.categorized_lists_service_add_items_to_list_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfCategorizedListItemViewModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}/options',
                'operation_id': 'categorized_lists_service_add_items_to_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                    'categorized_list_item_create_args',
                ],
                'required': [
                    'categorized_list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'categorized_list_item_create_args':
                        (CategorizedListItemCreateArgs,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                    'categorized_list_item_create_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.categorized_lists_service_add_items_to_list_from_file_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfCategorizedListItemModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}/options/file',
                'operation_id': 'categorized_lists_service_add_items_to_list_from_file',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                    'categorized_list_item_create_with_file_args',
                ],
                'required': [
                    'categorized_list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'categorized_list_item_create_with_file_args':
                        (CategorizedListItemCreateWithFileArgs,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                    'categorized_list_item_create_with_file_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.categorized_lists_service_add_items_to_list_with_category_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfCategorizedListItemViewModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}/options/{category}',
                'operation_id': 'categorized_lists_service_add_items_to_list_with_category',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                    'category',
                    'categorized_list_item_create_args',
                ],
                'required': [
                    'categorized_list_id',
                    'category',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'category':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'categorized_list_item_create_args':
                        (CategorizedListItemCreateArgs,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                    'category': 'category',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                    'category': 'path',
                    'categorized_list_item_create_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.categorized_lists_service_create_list_endpoint = _Endpoint(
            settings={
                'response_type': (CategorizedListModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists',
                'operation_id': 'categorized_lists_service_create_list',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_create_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_create_args':
                        (CategorizedListCreateArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'categorized_list_create_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.categorized_lists_service_delete_list_endpoint = _Endpoint(
            settings={
                'response_type': (CategorizedListDeleteModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}',
                'operation_id': 'categorized_lists_service_delete_list',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                ],
                'required': [
                    'categorized_list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.categorized_lists_service_get_all_lists_user_may_see_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfSimpleCategorizedList,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/summary',
                'operation_id': 'categorized_lists_service_get_all_lists_user_may_see',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.categorized_lists_service_get_categories_for_list_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfString,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}/categories',
                'operation_id': 'categorized_lists_service_get_categories_for_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                ],
                'required': [
                    'categorized_list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.categorized_lists_service_get_list_endpoint = _Endpoint(
            settings={
                'response_type': (CategorizedListModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}',
                'operation_id': 'categorized_lists_service_get_list',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                ],
                'required': [
                    'categorized_list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.categorized_lists_service_get_list_items_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfCategorizedListItemModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}/options',
                'operation_id': 'categorized_lists_service_get_list_items',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                    'filter_category',
                    'filter_null_category_is_uncategorized',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [
                    'categorized_list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_category':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_null_category_is_uncategorized':
                        (bool,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                    'filter_category': 'filter.category',
                    'filter_null_category_is_uncategorized': 'filter.nullCategoryIsUncategorized',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                    'filter_category': 'query',
                    'filter_null_category_is_uncategorized': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.categorized_lists_service_remove_item_from_list_endpoint = _Endpoint(
            settings={
                'response_type': (CategorizedListItemDeleteModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{listId}/options/{optionId}',
                'operation_id': 'categorized_lists_service_remove_item_from_list',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'list_id',
                    'option_id',
                ],
                'required': [
                    'list_id',
                    'option_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'option_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'list_id': 'listId',
                    'option_id': 'optionId',
                },
                'location_map': {
                    'list_id': 'path',
                    'option_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.categorized_lists_service_remove_items_from_list_endpoint = _Endpoint(
            settings={
                'response_type': (CategorizedListDeleteModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}/options',
                'operation_id': 'categorized_lists_service_remove_items_from_list',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                ],
                'required': [
                    'categorized_list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.categorized_lists_service_replace_items_in_list_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfCategorizedListItemViewModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}/options/replace',
                'operation_id': 'categorized_lists_service_replace_items_in_list',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                    'categorized_list_item_create_args',
                ],
                'required': [
                    'categorized_list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'categorized_list_item_create_args':
                        (CategorizedListItemCreateArgs,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                    'categorized_list_item_create_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.categorized_lists_service_search_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfCategorizedListSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists',
                'operation_id': 'categorized_lists_service_search',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'filter_include_active',
                    'filter_include_inactive',
                    'filter_search_text',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'filter_include_active':
                        (bool,),
                    'filter_include_inactive':
                        (bool,),
                    'filter_search_text':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'filter_include_active': 'filter.includeActive',
                    'filter_include_inactive': 'filter.includeInactive',
                    'filter_search_text': 'filter.searchText',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'filter_include_active': 'query',
                    'filter_include_inactive': 'query',
                    'filter_search_text': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.categorized_lists_service_search_list_audit_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfCategorizedListAuditModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}/audits',
                'operation_id': 'categorized_lists_service_search_list_audit',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                    'is_exporting',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [
                    'categorized_list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'is_exporting':
                        (bool,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                    'is_exporting': 'isExporting',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                    'is_exporting': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.categorized_lists_service_update_item_in_list_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfCategorizedListItemViewModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}/options/single',
                'operation_id': 'categorized_lists_service_update_item_in_list',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                    'categorized_list_item_single_update_args',
                ],
                'required': [
                    'categorized_list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'categorized_list_item_single_update_args':
                        (CategorizedListItemSingleUpdateArgs,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                    'categorized_list_item_single_update_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.categorized_lists_service_update_items_in_list_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfCategorizedListItemViewModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}/options',
                'operation_id': 'categorized_lists_service_update_items_in_list',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                    'categorized_list_item_update_args',
                ],
                'required': [
                    'categorized_list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'categorized_list_item_update_args':
                        (CategorizedListItemUpdateArgs,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                    'categorized_list_item_update_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.categorized_lists_service_update_list_endpoint = _Endpoint(
            settings={
                'response_type': (CategorizedListModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/lists/{categorizedListId}',
                'operation_id': 'categorized_lists_service_update_list',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'categorized_list_id',
                    'categorized_list_update_args',
                ],
                'required': [
                    'categorized_list_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'categorized_list_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'categorized_list_update_args':
                        (CategorizedListUpdateArgs,),
                },
                'attribute_map': {
                    'categorized_list_id': 'categorizedListId',
                },
                'location_map': {
                    'categorized_list_id': 'path',
                    'categorized_list_update_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def categorized_lists_service_add_item_to_list(
        self,
        categorized_list_id,
        **kwargs
    ):
        """Adds an option to a list  # noqa: E501

        Adds an option to the list with the provided ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_add_item_to_list(categorized_list_id, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): List ID

        Keyword Args:
            categorized_list_item_single_create_args (CategorizedListItemSingleCreateArgs): List option to be added. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfCategorizedListItemViewModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        return self.categorized_lists_service_add_item_to_list_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_add_items_to_list(
        self,
        categorized_list_id,
        **kwargs
    ):
        """Adds options to a list  # noqa: E501

        Adds the options to the list with the provided ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_add_items_to_list(categorized_list_id, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): List ID

        Keyword Args:
            categorized_list_item_create_args (CategorizedListItemCreateArgs): List options to be added. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfCategorizedListItemViewModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        return self.categorized_lists_service_add_items_to_list_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_add_items_to_list_from_file(
        self,
        categorized_list_id,
        **kwargs
    ):
        """Upload a file of list options  # noqa: E501

        Adds the options from the given file to the list with the provided ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_add_items_to_list_from_file(categorized_list_id, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): List ID

        Keyword Args:
            categorized_list_item_create_with_file_args (CategorizedListItemCreateWithFileArgs): File containing list options to add. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfCategorizedListItemModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        return self.categorized_lists_service_add_items_to_list_from_file_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_add_items_to_list_with_category(
        self,
        categorized_list_id,
        category,
        **kwargs
    ):
        """Adds options to the list with the specified category  # noqa: E501

        Adds the options to the list with the provided ID with the specified category  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_add_items_to_list_with_category(categorized_list_id, category, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): List ID
            category (bool, date, datetime, dict, float, int, list, str, none_type): Category to assign

        Keyword Args:
            categorized_list_item_create_args (CategorizedListItemCreateArgs): List options to be added. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfCategorizedListItemViewModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        kwargs['category'] = \
            category
        return self.categorized_lists_service_add_items_to_list_with_category_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_create_list(
        self,
        **kwargs
    ):
        """Create a list  # noqa: E501

        Creates the given list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_create_list(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            categorized_list_create_args (CategorizedListCreateArgs): List be added. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CategorizedListModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.categorized_lists_service_create_list_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_delete_list(
        self,
        categorized_list_id,
        **kwargs
    ):
        """Delete List  # noqa: E501

        Delete a List by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_delete_list(categorized_list_id, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): ID of list to be deleted

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CategorizedListDeleteModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        return self.categorized_lists_service_delete_list_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_get_all_lists_user_may_see(
        self,
        **kwargs
    ):
        """Get a list of lists available to current user  # noqa: E501

        Returns a list of lists for the current user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_get_all_lists_user_may_see(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfSimpleCategorizedList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.categorized_lists_service_get_all_lists_user_may_see_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_get_categories_for_list(
        self,
        categorized_list_id,
        **kwargs
    ):
        """Get a list's current categories  # noqa: E501

        Returns the list's categories for the provided ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_get_categories_for_list(categorized_list_id, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): List ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfString
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        return self.categorized_lists_service_get_categories_for_list_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_get_list(
        self,
        categorized_list_id,
        **kwargs
    ):
        """Get a list  # noqa: E501

        Returns the list for the provided ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_get_list(categorized_list_id, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): List ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CategorizedListModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        return self.categorized_lists_service_get_list_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_get_list_items(
        self,
        categorized_list_id,
        **kwargs
    ):
        """Get a list's items  # noqa: E501

        Returns the list's options for the provided ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_get_list_items(categorized_list_id, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): List ID

        Keyword Args:
            filter_category (bool, date, datetime, dict, float, int, list, str, none_type): Category text to filter by. If empty or not included, will return items for all categories.. [optional]
            filter_null_category_is_uncategorized (bool): If true and Category value is an empty string or not included, will return only uncategorized items; otherwise, an empty category filter is treated as no category filter.. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfCategorizedListItemModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        return self.categorized_lists_service_get_list_items_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_remove_item_from_list(
        self,
        list_id,
        option_id,
        **kwargs
    ):
        """Delete a list option from a list  # noqa: E501

        Delete a list option from a list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_remove_item_from_list(list_id, option_id, async_req=True)
        >>> result = thread.get()

        Args:
            list_id (bool, date, datetime, dict, float, int, list, str, none_type): List id
            option_id (bool, date, datetime, dict, float, int, list, str, none_type): List option id

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CategorizedListItemDeleteModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['list_id'] = \
            list_id
        kwargs['option_id'] = \
            option_id
        return self.categorized_lists_service_remove_item_from_list_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_remove_items_from_list(
        self,
        categorized_list_id,
        **kwargs
    ):
        """Delete all list options from a list  # noqa: E501

        Delete all list options from a list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_remove_items_from_list(categorized_list_id, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): List ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CategorizedListDeleteModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        return self.categorized_lists_service_remove_items_from_list_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_replace_items_in_list(
        self,
        categorized_list_id,
        **kwargs
    ):
        """Replaces options in a list  # noqa: E501

        Replaces all options currently in the list with the given options  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_replace_items_in_list(categorized_list_id, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): List ID

        Keyword Args:
            categorized_list_item_create_args (CategorizedListItemCreateArgs): List options to be added. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfCategorizedListItemViewModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        return self.categorized_lists_service_replace_items_in_list_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_search(
        self,
        **kwargs
    ):
        """Search Lists  # noqa: E501

        Search, filter, sort, and page lists  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_search(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            filter_include_active (bool): Whether to include active lists in results (when excluded equals true). [optional]
            filter_include_inactive (bool): Whether to include inactive lists in results. [optional]
            filter_search_text (bool, date, datetime, dict, float, int, list, str, none_type): Search text. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfCategorizedListSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.categorized_lists_service_search_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_search_list_audit(
        self,
        categorized_list_id,
        **kwargs
    ):
        """Get Audits for List  # noqa: E501

        Search, filter, sort, and page List Audits.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_search_list_audit(categorized_list_id, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): List Id

        Keyword Args:
            is_exporting (bool): isExporting. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfCategorizedListAuditModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        return self.categorized_lists_service_search_list_audit_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_update_item_in_list(
        self,
        categorized_list_id,
        **kwargs
    ):
        """Updates an option in a list  # noqa: E501

        Updates an option in the list with the provided ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_update_item_in_list(categorized_list_id, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): List ID

        Keyword Args:
            categorized_list_item_single_update_args (CategorizedListItemSingleUpdateArgs): List option to be updated. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfCategorizedListItemViewModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        return self.categorized_lists_service_update_item_in_list_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_update_items_in_list(
        self,
        categorized_list_id,
        **kwargs
    ):
        """Updates options in a list  # noqa: E501

        Updates the options in the list with the provided ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_update_items_in_list(categorized_list_id, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): List ID

        Keyword Args:
            categorized_list_item_update_args (CategorizedListItemUpdateArgs): List options to be updated. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfCategorizedListItemViewModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        return self.categorized_lists_service_update_items_in_list_endpoint.call_with_http_info(**kwargs)

    def categorized_lists_service_update_list(
        self,
        categorized_list_id,
        **kwargs
    ):
        """Update a list  # noqa: E501

        Updates a given list  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.categorized_lists_service_update_list(categorized_list_id, async_req=True)
        >>> result = thread.get()

        Args:
            categorized_list_id (bool, date, datetime, dict, float, int, list, str, none_type): List ID

        Keyword Args:
            categorized_list_update_args (CategorizedListUpdateArgs): List to be updated. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CategorizedListModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['categorized_list_id'] = \
            categorized_list_id
        return self.categorized_lists_service_update_list_endpoint.call_with_http_info(**kwargs)

