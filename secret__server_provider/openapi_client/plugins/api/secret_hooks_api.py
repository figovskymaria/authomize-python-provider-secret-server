"""
    Secret Server Rest API

    REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 11.2.2
    Contact: info@authomize.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from plugins.api_client import ApiClient, Endpoint as _Endpoint
from plugins.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from plugins.model.authentication_failed_response import AuthenticationFailedResponse
from plugins.model.bad_request_response import BadRequestResponse
from plugins.model.internal_server_error_response import InternalServerErrorResponse
from plugins.model.secret_detail_hook_create_args import SecretDetailHookCreateArgs
from plugins.model.secret_detail_hook_model import SecretDetailHookModel
from plugins.model.secret_detail_hook_summary_view_model import SecretDetailHookSummaryViewModel
from plugins.model.secret_detail_hook_update_args import SecretDetailHookUpdateArgs


class SecretHooksApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.secret_hooks_service_create_hook_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailHookModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secret-detail/{secretId}/hook',
                'operation_id': 'secret_hooks_service_create_hook',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_id',
                    'secret_detail_hook_create_args',
                ],
                'required': [
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_hook_create_args':
                        (SecretDetailHookCreateArgs,),
                },
                'attribute_map': {
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'secret_id': 'path',
                    'secret_detail_hook_create_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secret_hooks_service_create_hook_v2_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailHookModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v2/secret-detail/{secretId}/hook',
                'operation_id': 'secret_hooks_service_create_hook_v2',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_id',
                    'secret_detail_hook_create_args',
                ],
                'required': [
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_hook_create_args':
                        (SecretDetailHookCreateArgs,),
                },
                'attribute_map': {
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'secret_id': 'path',
                    'secret_detail_hook_create_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secret_hooks_service_delete_hook_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secret-detail/{secretId}/hook/{secretHookId}',
                'operation_id': 'secret_hooks_service_delete_hook',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_hook_id',
                    'secret_id',
                ],
                'required': [
                    'secret_hook_id',
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_hook_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'secret_hook_id': 'secretHookId',
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'secret_hook_id': 'path',
                    'secret_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_hooks_service_get_hook_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailHookModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secret-detail/{secretId}/hook/get/{secretHookId}',
                'operation_id': 'secret_hooks_service_get_hook',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_hook_id',
                    'secret_id',
                ],
                'required': [
                    'secret_hook_id',
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_hook_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'secret_hook_id': 'secretHookId',
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'secret_hook_id': 'path',
                    'secret_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_hooks_service_get_hook_v2_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailHookModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v2/secret-detail/{secretId}/hook/get/{secretHookId}',
                'operation_id': 'secret_hooks_service_get_hook_v2',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_hook_id',
                    'secret_id',
                ],
                'required': [
                    'secret_hook_id',
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_hook_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'secret_hook_id': 'secretHookId',
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'secret_hook_id': 'path',
                    'secret_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_hooks_service_get_hooks_endpoint = _Endpoint(
            settings={
                'response_type': ([SecretDetailHookSummaryViewModel],),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secret-detail/{secretId}/hooks',
                'operation_id': 'secret_hooks_service_get_hooks',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_id',
                ],
                'required': [
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'secret_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_hooks_service_get_hooks_v2_endpoint = _Endpoint(
            settings={
                'response_type': ([SecretDetailHookSummaryViewModel],),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v2/secret-detail/{secretId}/hooks',
                'operation_id': 'secret_hooks_service_get_hooks_v2',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_id',
                ],
                'required': [
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'secret_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_hooks_service_stub_hook_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailHookModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secret-detail/{secretId}/hook/stub/{scriptId}',
                'operation_id': 'secret_hooks_service_stub_hook',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'script_id',
                    'secret_id',
                ],
                'required': [
                    'script_id',
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'script_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'script_id': 'scriptId',
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'script_id': 'path',
                    'secret_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_hooks_service_stub_hook_v2_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailHookModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v2/secret-detail/{secretId}/hook/stub/{scriptId}',
                'operation_id': 'secret_hooks_service_stub_hook_v2',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'script_id',
                    'secret_id',
                ],
                'required': [
                    'script_id',
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'script_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'script_id': 'scriptId',
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'script_id': 'path',
                    'secret_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_hooks_service_update_hook_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailHookModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secret-detail/{secretId}/hook/{secretHookId}',
                'operation_id': 'secret_hooks_service_update_hook',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_hook_id',
                    'secret_id',
                    'secret_detail_hook_update_args',
                ],
                'required': [
                    'secret_hook_id',
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_hook_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_hook_update_args':
                        (SecretDetailHookUpdateArgs,),
                },
                'attribute_map': {
                    'secret_hook_id': 'secretHookId',
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'secret_hook_id': 'path',
                    'secret_id': 'path',
                    'secret_detail_hook_update_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secret_hooks_service_update_hook_v2_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailHookModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v2/secret-detail/{secretId}/hook/{secretHookId}',
                'operation_id': 'secret_hooks_service_update_hook_v2',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_hook_id',
                    'secret_id',
                    'secret_detail_hook_update_args',
                ],
                'required': [
                    'secret_hook_id',
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_hook_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_hook_update_args':
                        (SecretDetailHookUpdateArgs,),
                },
                'attribute_map': {
                    'secret_hook_id': 'secretHookId',
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'secret_hook_id': 'path',
                    'secret_id': 'path',
                    'secret_detail_hook_update_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def secret_hooks_service_create_hook(
        self,
        secret_id,
        **kwargs
    ):
        """Create Secret hook  # noqa: E501

        Create Secret hook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_hooks_service_create_hook(secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): secretId

        Keyword Args:
            secret_detail_hook_create_args (SecretDetailHookCreateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailHookModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['secret_id'] = \
            secret_id
        return self.secret_hooks_service_create_hook_endpoint.call_with_http_info(**kwargs)

    def secret_hooks_service_create_hook_v2(
        self,
        secret_id,
        **kwargs
    ):
        """Create Secret hook v2  # noqa: E501

        Create Secret hook v2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_hooks_service_create_hook_v2(secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): secretId

        Keyword Args:
            secret_detail_hook_create_args (SecretDetailHookCreateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailHookModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['secret_id'] = \
            secret_id
        return self.secret_hooks_service_create_hook_v2_endpoint.call_with_http_info(**kwargs)

    def secret_hooks_service_delete_hook(
        self,
        secret_hook_id,
        secret_id,
        **kwargs
    ):
        """Delete Secret Hook  # noqa: E501

        Delete Secret Hook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_hooks_service_delete_hook(secret_hook_id, secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            secret_hook_id (bool, date, datetime, dict, float, int, list, str, none_type): secretHookId
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): secretId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['secret_hook_id'] = \
            secret_hook_id
        kwargs['secret_id'] = \
            secret_id
        return self.secret_hooks_service_delete_hook_endpoint.call_with_http_info(**kwargs)

    def secret_hooks_service_get_hook(
        self,
        secret_hook_id,
        secret_id,
        **kwargs
    ):
        """Get Secret hook details  # noqa: E501

        Get Secret hook details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_hooks_service_get_hook(secret_hook_id, secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            secret_hook_id (bool, date, datetime, dict, float, int, list, str, none_type): secretHookId
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): secretId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailHookModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['secret_hook_id'] = \
            secret_hook_id
        kwargs['secret_id'] = \
            secret_id
        return self.secret_hooks_service_get_hook_endpoint.call_with_http_info(**kwargs)

    def secret_hooks_service_get_hook_v2(
        self,
        secret_hook_id,
        secret_id,
        **kwargs
    ):
        """Get Secret hook details  # noqa: E501

        Get Secret hook details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_hooks_service_get_hook_v2(secret_hook_id, secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            secret_hook_id (bool, date, datetime, dict, float, int, list, str, none_type): secretHookId
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): secretId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailHookModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['secret_hook_id'] = \
            secret_hook_id
        kwargs['secret_id'] = \
            secret_id
        return self.secret_hooks_service_get_hook_v2_endpoint.call_with_http_info(**kwargs)

    def secret_hooks_service_get_hooks(
        self,
        secret_id,
        **kwargs
    ):
        """Get Secret Hooks  # noqa: E501

        Get all of the hooks for the specified secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_hooks_service_get_hooks(secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): secretId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [SecretDetailHookSummaryViewModel]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['secret_id'] = \
            secret_id
        return self.secret_hooks_service_get_hooks_endpoint.call_with_http_info(**kwargs)

    def secret_hooks_service_get_hooks_v2(
        self,
        secret_id,
        **kwargs
    ):
        """Get Secret Hooks  # noqa: E501

        Get all of the hooks for the specified secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_hooks_service_get_hooks_v2(secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): secretId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [SecretDetailHookSummaryViewModel]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['secret_id'] = \
            secret_id
        return self.secret_hooks_service_get_hooks_v2_endpoint.call_with_http_info(**kwargs)

    def secret_hooks_service_stub_hook(
        self,
        script_id,
        secret_id,
        **kwargs
    ):
        """Stub Hook  # noqa: E501

        Get stub for a new Secret hook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_hooks_service_stub_hook(script_id, secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            script_id (bool, date, datetime, dict, float, int, list, str, none_type): scriptId
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): secretId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailHookModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['script_id'] = \
            script_id
        kwargs['secret_id'] = \
            secret_id
        return self.secret_hooks_service_stub_hook_endpoint.call_with_http_info(**kwargs)

    def secret_hooks_service_stub_hook_v2(
        self,
        script_id,
        secret_id,
        **kwargs
    ):
        """Stub Hook  # noqa: E501

        Get stub for a new Secret hook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_hooks_service_stub_hook_v2(script_id, secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            script_id (bool, date, datetime, dict, float, int, list, str, none_type): scriptId
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): secretId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailHookModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['script_id'] = \
            script_id
        kwargs['secret_id'] = \
            secret_id
        return self.secret_hooks_service_stub_hook_v2_endpoint.call_with_http_info(**kwargs)

    def secret_hooks_service_update_hook(
        self,
        secret_hook_id,
        secret_id,
        **kwargs
    ):
        """Update Secret Hook  # noqa: E501

        Update Secret hook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_hooks_service_update_hook(secret_hook_id, secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            secret_hook_id (bool, date, datetime, dict, float, int, list, str, none_type): secretHookId
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): secretId

        Keyword Args:
            secret_detail_hook_update_args (SecretDetailHookUpdateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailHookModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['secret_hook_id'] = \
            secret_hook_id
        kwargs['secret_id'] = \
            secret_id
        return self.secret_hooks_service_update_hook_endpoint.call_with_http_info(**kwargs)

    def secret_hooks_service_update_hook_v2(
        self,
        secret_hook_id,
        secret_id,
        **kwargs
    ):
        """Update Secret Hook  # noqa: E501

        Update Secret hook  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_hooks_service_update_hook_v2(secret_hook_id, secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            secret_hook_id (bool, date, datetime, dict, float, int, list, str, none_type): secretHookId
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): secretId

        Keyword Args:
            secret_detail_hook_update_args (SecretDetailHookUpdateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailHookModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['secret_hook_id'] = \
            secret_hook_id
        kwargs['secret_id'] = \
            secret_id
        return self.secret_hooks_service_update_hook_v2_endpoint.call_with_http_info(**kwargs)

