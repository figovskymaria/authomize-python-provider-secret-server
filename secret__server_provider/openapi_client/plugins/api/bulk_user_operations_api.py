"""
    Secret Server Rest API

    REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 11.2.2
    Contact: info@authomize.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from plugins.api_client import ApiClient, Endpoint as _Endpoint
from plugins.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from plugins.model.add_users_to_group_args import AddUsersToGroupArgs
from plugins.model.add_users_to_team_args import AddUsersToTeamArgs
from plugins.model.authentication_failed_response import AuthenticationFailedResponse
from plugins.model.bad_request_response import BadRequestResponse
from plugins.model.bulk_operation_response_message import BulkOperationResponseMessage
from plugins.model.disable_duo_auth_for_users_args import DisableDuoAuthForUsersArgs
from plugins.model.disable_email_two_factor_for_users_args import DisableEmailTwoFactorForUsersArgs
from plugins.model.disable_fido2_two_factor_for_users_args import DisableFido2TwoFactorForUsersArgs
from plugins.model.disable_radius_two_factor_for_users_args import DisableRadiusTwoFactorForUsersArgs
from plugins.model.disable_totp_auth_for_users_args import DisableTOTPAuthForUsersArgs
from plugins.model.disable_users_args import DisableUsersArgs
from plugins.model.enable_duo_auth_for_users_args import EnableDuoAuthForUsersArgs
from plugins.model.enable_email_two_factor_for_users_args import EnableEmailTwoFactorForUsersArgs
from plugins.model.enable_fido2_two_factor_for_users_args import EnableFido2TwoFactorForUsersArgs
from plugins.model.enable_radius_two_factor_for_users_args import EnableRadiusTwoFactorForUsersArgs
from plugins.model.enable_totp_auth_for_users_args import EnableTOTPAuthForUsersArgs
from plugins.model.enable_users_args import EnableUsersArgs
from plugins.model.force_logout_for_users_args import ForceLogoutForUsersArgs
from plugins.model.internal_server_error_response import InternalServerErrorResponse
from plugins.model.lock_users_args import LockUsersArgs
from plugins.model.remove_users_from_group_args import RemoveUsersFromGroupArgs
from plugins.model.remove_users_from_team_args import RemoveUsersFromTeamArgs
from plugins.model.reset_fido2_two_factor_for_users_args import ResetFido2TwoFactorForUsersArgs
from plugins.model.reset_totp_auth_for_users_args import ResetTOTPAuthForUsersArgs
from plugins.model.unlock_users_args import UnlockUsersArgs


class BulkUserOperationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.bulk_user_operations_service_add_users_to_group_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/add-to-group',
                'operation_id': 'bulk_user_operations_service_add_users_to_group',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_users_to_group_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_users_to_group_args':
                        (AddUsersToGroupArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_users_to_group_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_add_users_to_team_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/add-to-team',
                'operation_id': 'bulk_user_operations_service_add_users_to_team',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'add_users_to_team_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'add_users_to_team_args':
                        (AddUsersToTeamArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'add_users_to_team_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_disable_duo_auth_for_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/disable-duo-auth',
                'operation_id': 'bulk_user_operations_service_disable_duo_auth_for_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'disable_duo_auth_for_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'disable_duo_auth_for_users_args':
                        (DisableDuoAuthForUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'disable_duo_auth_for_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_disable_email_two_factor_for_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/disable-email-two-factor',
                'operation_id': 'bulk_user_operations_service_disable_email_two_factor_for_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'disable_email_two_factor_for_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'disable_email_two_factor_for_users_args':
                        (DisableEmailTwoFactorForUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'disable_email_two_factor_for_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_disable_fido2_two_factor_for_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/disable-fido2-two-factor',
                'operation_id': 'bulk_user_operations_service_disable_fido2_two_factor_for_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'disable_fido2_two_factor_for_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'disable_fido2_two_factor_for_users_args':
                        (DisableFido2TwoFactorForUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'disable_fido2_two_factor_for_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_disable_radius_two_factor_for_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/disable-radius-two-factor',
                'operation_id': 'bulk_user_operations_service_disable_radius_two_factor_for_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'disable_radius_two_factor_for_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'disable_radius_two_factor_for_users_args':
                        (DisableRadiusTwoFactorForUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'disable_radius_two_factor_for_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_disable_totp_auth_for_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/disable-totp-auth',
                'operation_id': 'bulk_user_operations_service_disable_totp_auth_for_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'disable_totp_auth_for_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'disable_totp_auth_for_users_args':
                        (DisableTOTPAuthForUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'disable_totp_auth_for_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_disable_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/disable',
                'operation_id': 'bulk_user_operations_service_disable_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'disable_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'disable_users_args':
                        (DisableUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'disable_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_enable_duo_auth_for_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/enable-duo-auth',
                'operation_id': 'bulk_user_operations_service_enable_duo_auth_for_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'enable_duo_auth_for_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'enable_duo_auth_for_users_args':
                        (EnableDuoAuthForUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'enable_duo_auth_for_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_enable_email_two_factor_for_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/enable-email-two-factor',
                'operation_id': 'bulk_user_operations_service_enable_email_two_factor_for_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'enable_email_two_factor_for_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'enable_email_two_factor_for_users_args':
                        (EnableEmailTwoFactorForUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'enable_email_two_factor_for_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_enable_fido2_two_factor_for_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/enable-fido2-two-factor',
                'operation_id': 'bulk_user_operations_service_enable_fido2_two_factor_for_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'enable_fido2_two_factor_for_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'enable_fido2_two_factor_for_users_args':
                        (EnableFido2TwoFactorForUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'enable_fido2_two_factor_for_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_enable_radius_two_factor_for_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/enable-radius-two-factor',
                'operation_id': 'bulk_user_operations_service_enable_radius_two_factor_for_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'enable_radius_two_factor_for_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'enable_radius_two_factor_for_users_args':
                        (EnableRadiusTwoFactorForUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'enable_radius_two_factor_for_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_enable_totp_auth_for_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/enable-totp-auth',
                'operation_id': 'bulk_user_operations_service_enable_totp_auth_for_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'enable_totp_auth_for_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'enable_totp_auth_for_users_args':
                        (EnableTOTPAuthForUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'enable_totp_auth_for_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_enable_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/enable',
                'operation_id': 'bulk_user_operations_service_enable_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'enable_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'enable_users_args':
                        (EnableUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'enable_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_force_logout_for_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/force-logout',
                'operation_id': 'bulk_user_operations_service_force_logout_for_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'force_logout_for_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'force_logout_for_users_args':
                        (ForceLogoutForUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'force_logout_for_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_lock_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/lock',
                'operation_id': 'bulk_user_operations_service_lock_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'lock_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'lock_users_args':
                        (LockUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'lock_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_remove_users_from_group_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/remove-from-group',
                'operation_id': 'bulk_user_operations_service_remove_users_from_group',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'remove_users_from_group_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'remove_users_from_group_args':
                        (RemoveUsersFromGroupArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'remove_users_from_group_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_remove_users_from_team_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/remove-from-team',
                'operation_id': 'bulk_user_operations_service_remove_users_from_team',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'remove_users_from_team_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'remove_users_from_team_args':
                        (RemoveUsersFromTeamArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'remove_users_from_team_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_reset_fido2_two_factor_for_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/reset-fido2-two-factor',
                'operation_id': 'bulk_user_operations_service_reset_fido2_two_factor_for_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'reset_fido2_two_factor_for_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reset_fido2_two_factor_for_users_args':
                        (ResetFido2TwoFactorForUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'reset_fido2_two_factor_for_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_reset_totp_auth_for_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/reset-totp-auth',
                'operation_id': 'bulk_user_operations_service_reset_totp_auth_for_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'reset_totp_auth_for_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'reset_totp_auth_for_users_args':
                        (ResetTOTPAuthForUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'reset_totp_auth_for_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.bulk_user_operations_service_unlock_users_endpoint = _Endpoint(
            settings={
                'response_type': (BulkOperationResponseMessage,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/bulk-user-operations/unlock',
                'operation_id': 'bulk_user_operations_service_unlock_users',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'unlock_users_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'unlock_users_args':
                        (UnlockUsersArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'unlock_users_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def bulk_user_operations_service_add_users_to_group(
        self,
        **kwargs
    ):
        """Add To Group  # noqa: E501

        Add selected Users to the specified Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_add_users_to_group(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            add_users_to_group_args (AddUsersToGroupArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_add_users_to_group_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_add_users_to_team(
        self,
        **kwargs
    ):
        """Add To Team  # noqa: E501

        Add selected Users to the specified Team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_add_users_to_team(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            add_users_to_team_args (AddUsersToTeamArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_add_users_to_team_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_disable_duo_auth_for_users(
        self,
        **kwargs
    ):
        """Disable Duo Auth  # noqa: E501

        Disable Duo Auth for each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_disable_duo_auth_for_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            disable_duo_auth_for_users_args (DisableDuoAuthForUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_disable_duo_auth_for_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_disable_email_two_factor_for_users(
        self,
        **kwargs
    ):
        """Disable Email Two Factor  # noqa: E501

        Disable Email two factor for each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_disable_email_two_factor_for_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            disable_email_two_factor_for_users_args (DisableEmailTwoFactorForUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_disable_email_two_factor_for_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_disable_fido2_two_factor_for_users(
        self,
        **kwargs
    ):
        """Disable Fido2 Two Factor  # noqa: E501

        Disable Fido2 two factor for each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_disable_fido2_two_factor_for_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            disable_fido2_two_factor_for_users_args (DisableFido2TwoFactorForUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_disable_fido2_two_factor_for_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_disable_radius_two_factor_for_users(
        self,
        **kwargs
    ):
        """Disable Radius Two Factor  # noqa: E501

        Disable Radius two factor for each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_disable_radius_two_factor_for_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            disable_radius_two_factor_for_users_args (DisableRadiusTwoFactorForUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_disable_radius_two_factor_for_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_disable_totp_auth_for_users(
        self,
        **kwargs
    ):
        """Disable TOTP Auth  # noqa: E501

        Disable TOTP Auth for each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_disable_totp_auth_for_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            disable_totp_auth_for_users_args (DisableTOTPAuthForUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_disable_totp_auth_for_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_disable_users(
        self,
        **kwargs
    ):
        """Disable  # noqa: E501

        Disable each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_disable_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            disable_users_args (DisableUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_disable_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_enable_duo_auth_for_users(
        self,
        **kwargs
    ):
        """Enable Duo Auth  # noqa: E501

        Enable Duo Auth for each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_enable_duo_auth_for_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            enable_duo_auth_for_users_args (EnableDuoAuthForUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_enable_duo_auth_for_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_enable_email_two_factor_for_users(
        self,
        **kwargs
    ):
        """Enable Email Two Factor  # noqa: E501

        Enable Email two factor for each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_enable_email_two_factor_for_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            enable_email_two_factor_for_users_args (EnableEmailTwoFactorForUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_enable_email_two_factor_for_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_enable_fido2_two_factor_for_users(
        self,
        **kwargs
    ):
        """Enable Fido2 Two Factor  # noqa: E501

        Enable Fido2 two factor for each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_enable_fido2_two_factor_for_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            enable_fido2_two_factor_for_users_args (EnableFido2TwoFactorForUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_enable_fido2_two_factor_for_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_enable_radius_two_factor_for_users(
        self,
        **kwargs
    ):
        """Enable Radius Two Factor  # noqa: E501

        Enable Radius two factor for each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_enable_radius_two_factor_for_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            enable_radius_two_factor_for_users_args (EnableRadiusTwoFactorForUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_enable_radius_two_factor_for_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_enable_totp_auth_for_users(
        self,
        **kwargs
    ):
        """Enable TOTP Auth  # noqa: E501

        Enable TOTP Auth for each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_enable_totp_auth_for_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            enable_totp_auth_for_users_args (EnableTOTPAuthForUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_enable_totp_auth_for_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_enable_users(
        self,
        **kwargs
    ):
        """Enable  # noqa: E501

        Enable each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_enable_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            enable_users_args (EnableUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_enable_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_force_logout_for_users(
        self,
        **kwargs
    ):
        """Force Logout  # noqa: E501

        Force Logout for each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_force_logout_for_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            force_logout_for_users_args (ForceLogoutForUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_force_logout_for_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_lock_users(
        self,
        **kwargs
    ):
        """Lock  # noqa: E501

        Lock selected Users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_lock_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            lock_users_args (LockUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_lock_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_remove_users_from_group(
        self,
        **kwargs
    ):
        """Remove From Group  # noqa: E501

        Remove selected Users from the specified Group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_remove_users_from_group(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            remove_users_from_group_args (RemoveUsersFromGroupArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_remove_users_from_group_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_remove_users_from_team(
        self,
        **kwargs
    ):
        """Remove From Team  # noqa: E501

        Remove selected Users from the specified Team.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_remove_users_from_team(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            remove_users_from_team_args (RemoveUsersFromTeamArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_remove_users_from_team_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_reset_fido2_two_factor_for_users(
        self,
        **kwargs
    ):
        """Reset Fido2 Two Factor  # noqa: E501

        Reset Fido2 two factor for each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_reset_fido2_two_factor_for_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            reset_fido2_two_factor_for_users_args (ResetFido2TwoFactorForUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_reset_fido2_two_factor_for_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_reset_totp_auth_for_users(
        self,
        **kwargs
    ):
        """Reset TOTP Auth  # noqa: E501

        Reset TOTP Auth for each User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_reset_totp_auth_for_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            reset_totp_auth_for_users_args (ResetTOTPAuthForUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_reset_totp_auth_for_users_endpoint.call_with_http_info(**kwargs)

    def bulk_user_operations_service_unlock_users(
        self,
        **kwargs
    ):
        """Unlock  # noqa: E501

        Unlock selected Users.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.bulk_user_operations_service_unlock_users(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            unlock_users_args (UnlockUsersArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            BulkOperationResponseMessage
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.bulk_user_operations_service_unlock_users_endpoint.call_with_http_info(**kwargs)

