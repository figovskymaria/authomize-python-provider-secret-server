"""
    Secret Server Rest API

    REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 11.2.2
    Contact: info@authomize.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from plugins.api_client import ApiClient, Endpoint as _Endpoint
from plugins.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from plugins.model.authentication_failed_response import AuthenticationFailedResponse
from plugins.model.bad_request_response import BadRequestResponse
from plugins.model.internal_server_error_response import InternalServerErrorResponse
from plugins.model.paging_of_i_secret_session_point_of_interest_summary_model import PagingOfISecretSessionPointOfInterestSummaryModel
from plugins.model.paging_of_secret_session_point_of_interest_model import PagingOfSecretSessionPointOfInterestModel
from plugins.model.paging_of_secret_session_summary import PagingOfSecretSessionSummary
from plugins.model.secret_session_model import SecretSessionModel
from plugins.model.secret_session_summary import SecretSessionSummary


class SecretSessionsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.secret_sessions_service_get_endpoint = _Endpoint(
            settings={
                'response_type': (SecretSessionModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/recorded-sessions/{id}',
                'operation_id': 'secret_sessions_service_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_sessions_service_get_session_recording_endpoint = _Endpoint(
            settings={
                'response_type': ({str: (bool, date, datetime, dict, float, int, list, str, none_type)},),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/recorded-sessions/{id}/session-recordings',
                'operation_id': 'secret_sessions_service_get_session_recording',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_sessions_service_get_summary_endpoint = _Endpoint(
            settings={
                'response_type': (SecretSessionSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/recorded-sessions/{id}/summary',
                'operation_id': 'secret_sessions_service_get_summary',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_sessions_service_process_session_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/recorded-sessions/{id}/request-processing',
                'operation_id': 'secret_sessions_service_process_session',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_sessions_service_search_points_of_interest_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfSecretSessionPointOfInterestModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/recorded-sessions/{id}/points-of-interest',
                'operation_id': 'secret_sessions_service_search_points_of_interest',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'filter_search_text',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_search_text':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'filter_search_text': 'filter.searchText',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'id': 'path',
                    'filter_search_text': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_sessions_service_search_points_of_interest_summary_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfISecretSessionPointOfInterestSummaryModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/recorded-sessions/{id}/points-of-interest-summary',
                'operation_id': 'secret_sessions_service_search_points_of_interest_summary',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'filter_search_text',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_search_text':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'filter_search_text': 'filter.searchText',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'id': 'path',
                    'filter_search_text': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_sessions_service_search_sessions_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfSecretSessionSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/recorded-sessions',
                'operation_id': 'secret_sessions_service_search_sessions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'filter_active',
                    'filter_date_range',
                    'filter_end_date',
                    'filter_end_time',
                    'filter_folder_id',
                    'filter_group_ids',
                    'filter_include_non_secret_server_sessions',
                    'filter_include_only_launched_successfully',
                    'filter_include_restricted',
                    'filter_include_sub_folders',
                    'filter_launcher_type_id',
                    'filter_search_text',
                    'filter_search_types',
                    'filter_secret_ids',
                    'filter_site_id',
                    'filter_start_date',
                    'filter_start_time',
                    'filter_user_ids',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'filter_active':
                        (bool,),
                    'filter_date_range':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_end_date':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_end_time':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_folder_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_group_ids':
                        ([bool, date, datetime, dict, float, int, list, str, none_type],),
                    'filter_include_non_secret_server_sessions':
                        (bool,),
                    'filter_include_only_launched_successfully':
                        (bool,),
                    'filter_include_restricted':
                        (bool,),
                    'filter_include_sub_folders':
                        (bool,),
                    'filter_launcher_type_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_search_text':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_search_types':
                        ([bool, date, datetime, dict, float, int, list, str, none_type],),
                    'filter_secret_ids':
                        ([bool, date, datetime, dict, float, int, list, str, none_type],),
                    'filter_site_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_start_date':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_start_time':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_user_ids':
                        ([bool, date, datetime, dict, float, int, list, str, none_type],),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'filter_active': 'filter.active',
                    'filter_date_range': 'filter.dateRange',
                    'filter_end_date': 'filter.endDate',
                    'filter_end_time': 'filter.endTime',
                    'filter_folder_id': 'filter.folderId',
                    'filter_group_ids': 'filter.groupIds',
                    'filter_include_non_secret_server_sessions': 'filter.includeNonSecretServerSessions',
                    'filter_include_only_launched_successfully': 'filter.includeOnlyLaunchedSuccessfully',
                    'filter_include_restricted': 'filter.includeRestricted',
                    'filter_include_sub_folders': 'filter.includeSubFolders',
                    'filter_launcher_type_id': 'filter.launcherTypeId',
                    'filter_search_text': 'filter.searchText',
                    'filter_search_types': 'filter.searchTypes',
                    'filter_secret_ids': 'filter.secretIds',
                    'filter_site_id': 'filter.siteId',
                    'filter_start_date': 'filter.startDate',
                    'filter_start_time': 'filter.startTime',
                    'filter_user_ids': 'filter.userIds',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'filter_active': 'query',
                    'filter_date_range': 'query',
                    'filter_end_date': 'query',
                    'filter_end_time': 'query',
                    'filter_folder_id': 'query',
                    'filter_group_ids': 'query',
                    'filter_include_non_secret_server_sessions': 'query',
                    'filter_include_only_launched_successfully': 'query',
                    'filter_include_restricted': 'query',
                    'filter_include_sub_folders': 'query',
                    'filter_launcher_type_id': 'query',
                    'filter_search_text': 'query',
                    'filter_search_types': 'query',
                    'filter_secret_ids': 'query',
                    'filter_site_id': 'query',
                    'filter_start_date': 'query',
                    'filter_start_time': 'query',
                    'filter_user_ids': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                    'filter_group_ids': 'multi',
                    'filter_search_types': 'multi',
                    'filter_secret_ids': 'multi',
                    'filter_user_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def secret_sessions_service_get(
        self,
        id,
        **kwargs
    ):
        """Get Recorded Session  # noqa: E501

        Get a single recorded session by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_sessions_service_get(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Recorded session ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretSessionModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secret_sessions_service_get_endpoint.call_with_http_info(**kwargs)

    def secret_sessions_service_get_session_recording(
        self,
        id,
        **kwargs
    ):
        """Recorded Session Video Stream  # noqa: E501

        Get the video stream for a recorded session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_sessions_service_get_session_recording(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Recorded session ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            {str: (bool, date, datetime, dict, float, int, list, str, none_type)}
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secret_sessions_service_get_session_recording_endpoint.call_with_http_info(**kwargs)

    def secret_sessions_service_get_summary(
        self,
        id,
        **kwargs
    ):
        """Recorded Session Summary  # noqa: E501

        Get the summary for a recorded session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_sessions_service_get_summary(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Recorded session ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretSessionSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secret_sessions_service_get_summary_endpoint.call_with_http_info(**kwargs)

    def secret_sessions_service_process_session(
        self,
        id,
        **kwargs
    ):
        """Request Immediate Session Processing  # noqa: E501

        Issues a request for the immediate processing of a session video  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_sessions_service_process_session(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Recorded session ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secret_sessions_service_process_session_endpoint.call_with_http_info(**kwargs)

    def secret_sessions_service_search_points_of_interest(
        self,
        id,
        **kwargs
    ):
        """Recorded Session Points of Interest  # noqa: E501

        Get the points of interest for a recorded session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_sessions_service_search_points_of_interest(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Recorded session ID

        Keyword Args:
            filter_search_text (bool, date, datetime, dict, float, int, list, str, none_type): Search text. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfSecretSessionPointOfInterestModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secret_sessions_service_search_points_of_interest_endpoint.call_with_http_info(**kwargs)

    def secret_sessions_service_search_points_of_interest_summary(
        self,
        id,
        **kwargs
    ):
        """Recorded Session Points of Interest Summary  # noqa: E501

        Get the points of interest summary for a recorded session  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_sessions_service_search_points_of_interest_summary(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Recorded session ID

        Keyword Args:
            filter_search_text (bool, date, datetime, dict, float, int, list, str, none_type): Search text. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfISecretSessionPointOfInterestSummaryModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secret_sessions_service_search_points_of_interest_summary_endpoint.call_with_http_info(**kwargs)

    def secret_sessions_service_search_sessions(
        self,
        **kwargs
    ):
        """Search Recorded Sessions  # noqa: E501

        Search, filter, sort, and page recorded sessions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_sessions_service_search_sessions(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            filter_active (bool): Filter by active or inactive status. [optional]
            filter_date_range (bool, date, datetime, dict, float, int, list, str, none_type): Return sessions within a certain number of days. [optional]
            filter_end_date (bool, date, datetime, dict, float, int, list, str, none_type): EndDate. [optional]
            filter_end_time (bool, date, datetime, dict, float, int, list, str, none_type): EndTime. [optional]
            filter_folder_id (bool, date, datetime, dict, float, int, list, str, none_type): Filter by folder. [optional]
            filter_group_ids ([bool, date, datetime, dict, float, int, list, str, none_type]): Return sessions for specific groups. [optional]
            filter_include_non_secret_server_sessions (bool): IncludeNonSecretServerSessions. [optional]
            filter_include_only_launched_successfully (bool): Return only sessions that launched successfully. [optional]
            filter_include_restricted (bool): Whether to include restricted secret sessions. [optional]
            filter_include_sub_folders (bool): Whether to include subfolders in a folder search. [optional]
            filter_launcher_type_id (bool, date, datetime, dict, float, int, list, str, none_type): Filter by launcher type. [optional]
            filter_search_text (bool, date, datetime, dict, float, int, list, str, none_type): Search text. [optional]
            filter_search_types ([bool, date, datetime, dict, float, int, list, str, none_type]): Specifies the sources of information you want to search across, can be many of (SecretItems, Username, Hostname, Domain, RdpKeystroke, RdpApplication, ProxyClient). [optional]
            filter_secret_ids ([bool, date, datetime, dict, float, int, list, str, none_type]): Return sessions for specific secrets. [optional]
            filter_site_id (bool, date, datetime, dict, float, int, list, str, none_type): SiteId. [optional]
            filter_start_date (bool, date, datetime, dict, float, int, list, str, none_type): StartDate. [optional]
            filter_start_time (bool, date, datetime, dict, float, int, list, str, none_type): StartTime. [optional]
            filter_user_ids ([bool, date, datetime, dict, float, int, list, str, none_type]): Return sessions for specific users. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfSecretSessionSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secret_sessions_service_search_sessions_endpoint.call_with_http_info(**kwargs)

