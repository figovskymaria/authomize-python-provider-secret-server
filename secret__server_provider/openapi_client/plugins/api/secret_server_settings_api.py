"""
    Secret Server Rest API

    REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 11.2.2
    Contact: info@authomize.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from plugins.api_client import ApiClient, Endpoint as _Endpoint
from plugins.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from plugins.model.authentication_failed_response import AuthenticationFailedResponse
from plugins.model.bad_request_response import BadRequestResponse
from plugins.model.internal_server_error_response import InternalServerErrorResponse
from plugins.model.secret_server_settings_import_args import SecretServerSettingsImportArgs
from plugins.model.secret_server_settings_import_capabilities_args import SecretServerSettingsImportCapabilitiesArgs
from plugins.model.secret_server_settings_import_capability_model import SecretServerSettingsImportCapabilityModel
from plugins.model.secret_server_settings_import_result_model import SecretServerSettingsImportResultModel
from plugins.model.secret_server_settings_model import SecretServerSettingsModel


class SecretServerSettingsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.secret_server_settings_service_get_export_endpoint = _Endpoint(
            settings={
                'response_type': (SecretServerSettingsModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secretserversettings/export',
                'operation_id': 'secret_server_settings_service_get_export',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'load_advanced_settings',
                    'load_all',
                    'load_application_settings',
                    'load_email',
                    'load_folder_settings',
                    'load_launcher_settings',
                    'load_licenses',
                    'load_local_user_passwords',
                    'load_login',
                    'load_permission_options',
                    'load_protocol_handler_settings',
                    'load_saml',
                    'load_security',
                    'load_session_recording',
                    'load_ssh_commands',
                    'load_ticket_system',
                    'load_user_experience',
                    'load_user_interface',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'load_advanced_settings':
                        (bool,),
                    'load_all':
                        (bool,),
                    'load_application_settings':
                        (bool,),
                    'load_email':
                        (bool,),
                    'load_folder_settings':
                        (bool,),
                    'load_launcher_settings':
                        (bool,),
                    'load_licenses':
                        (bool,),
                    'load_local_user_passwords':
                        (bool,),
                    'load_login':
                        (bool,),
                    'load_permission_options':
                        (bool,),
                    'load_protocol_handler_settings':
                        (bool,),
                    'load_saml':
                        (bool,),
                    'load_security':
                        (bool,),
                    'load_session_recording':
                        (bool,),
                    'load_ssh_commands':
                        (bool,),
                    'load_ticket_system':
                        (bool,),
                    'load_user_experience':
                        (bool,),
                    'load_user_interface':
                        (bool,),
                },
                'attribute_map': {
                    'load_advanced_settings': 'loadAdvancedSettings',
                    'load_all': 'loadAll',
                    'load_application_settings': 'loadApplicationSettings',
                    'load_email': 'loadEmail',
                    'load_folder_settings': 'loadFolderSettings',
                    'load_launcher_settings': 'loadLauncherSettings',
                    'load_licenses': 'loadLicenses',
                    'load_local_user_passwords': 'loadLocalUserPasswords',
                    'load_login': 'loadLogin',
                    'load_permission_options': 'loadPermissionOptions',
                    'load_protocol_handler_settings': 'loadProtocolHandlerSettings',
                    'load_saml': 'loadSaml',
                    'load_security': 'loadSecurity',
                    'load_session_recording': 'loadSessionRecording',
                    'load_ssh_commands': 'loadSshCommands',
                    'load_ticket_system': 'loadTicketSystem',
                    'load_user_experience': 'loadUserExperience',
                    'load_user_interface': 'loadUserInterface',
                },
                'location_map': {
                    'load_advanced_settings': 'query',
                    'load_all': 'query',
                    'load_application_settings': 'query',
                    'load_email': 'query',
                    'load_folder_settings': 'query',
                    'load_launcher_settings': 'query',
                    'load_licenses': 'query',
                    'load_local_user_passwords': 'query',
                    'load_login': 'query',
                    'load_permission_options': 'query',
                    'load_protocol_handler_settings': 'query',
                    'load_saml': 'query',
                    'load_security': 'query',
                    'load_session_recording': 'query',
                    'load_ssh_commands': 'query',
                    'load_ticket_system': 'query',
                    'load_user_experience': 'query',
                    'load_user_interface': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_server_settings_service_get_export_import_capabilities_endpoint = _Endpoint(
            settings={
                'response_type': (SecretServerSettingsImportCapabilityModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secretserversettings/capabilities',
                'operation_id': 'secret_server_settings_service_get_export_import_capabilities',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_server_settings_import_capabilities_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_server_settings_import_capabilities_args':
                        (SecretServerSettingsImportCapabilitiesArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'secret_server_settings_import_capabilities_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secret_server_settings_service_get_export_stub_endpoint = _Endpoint(
            settings={
                'response_type': (SecretServerSettingsModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secretserversettings/export/stub',
                'operation_id': 'secret_server_settings_service_get_export_stub',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secret_server_settings_service_import_setting_endpoint = _Endpoint(
            settings={
                'response_type': (SecretServerSettingsImportResultModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secretserversettings/import',
                'operation_id': 'secret_server_settings_service_import_setting',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_server_settings_import_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_server_settings_import_args':
                        (SecretServerSettingsImportArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'secret_server_settings_import_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def secret_server_settings_service_get_export(
        self,
        **kwargs
    ):
        """Get Secret Server Settings  # noqa: E501

        Get Secret Server Settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_server_settings_service_get_export(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            load_advanced_settings (bool): LoadAdvancedSettings. [optional]
            load_all (bool): LoadAll. [optional]
            load_application_settings (bool): LoadApplicationSettings. [optional]
            load_email (bool): LoadEmail. [optional]
            load_folder_settings (bool): LoadFolderSettings. [optional]
            load_launcher_settings (bool): LoadLauncherSettings. [optional]
            load_licenses (bool): LoadLicenses. [optional]
            load_local_user_passwords (bool): LoadLocalUserPasswords. [optional]
            load_login (bool): LoadLogin. [optional]
            load_permission_options (bool): LoadPermissionOptions. [optional]
            load_protocol_handler_settings (bool): LoadProtocolHandlerSettings. [optional]
            load_saml (bool): LoadSaml. [optional]
            load_security (bool): LoadSecurity. [optional]
            load_session_recording (bool): LoadSessionRecording. [optional]
            load_ssh_commands (bool): LoadSshCommands. [optional]
            load_ticket_system (bool): LoadTicketSystem. [optional]
            load_user_experience (bool): LoadUserExperience. [optional]
            load_user_interface (bool): LoadUserInterface. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretServerSettingsModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secret_server_settings_service_get_export_endpoint.call_with_http_info(**kwargs)

    def secret_server_settings_service_get_export_import_capabilities(
        self,
        **kwargs
    ):
        """Get Import/Export Capabilities  # noqa: E501

        Returns model indicating what the user can import and export.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_server_settings_service_get_export_import_capabilities(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            secret_server_settings_import_capabilities_args (SecretServerSettingsImportCapabilitiesArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretServerSettingsImportCapabilityModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secret_server_settings_service_get_export_import_capabilities_endpoint.call_with_http_info(**kwargs)

    def secret_server_settings_service_get_export_stub(
        self,
        **kwargs
    ):
        """Stub an empty Secret Server Settings export  # noqa: E501

        Returns an empty Secret Server Settings export to be filled out.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_server_settings_service_get_export_stub(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretServerSettingsModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secret_server_settings_service_get_export_stub_endpoint.call_with_http_info(**kwargs)

    def secret_server_settings_service_import_setting(
        self,
        **kwargs
    ):
        """Import Secret Server Settings  # noqa: E501

        Apply a set of Secret Server Settings via a JSON upload.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secret_server_settings_service_import_setting(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            secret_server_settings_import_args (SecretServerSettingsImportArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretServerSettingsImportResultModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secret_server_settings_service_import_setting_endpoint.call_with_http_info(**kwargs)

