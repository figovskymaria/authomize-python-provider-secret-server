"""
    Secret Server Rest API

    REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 11.2.2
    Contact: info@authomize.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from plugins.api_client import ApiClient, Endpoint as _Endpoint
from plugins.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from plugins.model.authentication_failed_response import AuthenticationFailedResponse
from plugins.model.bad_request_response import BadRequestResponse
from plugins.model.discovery_configuration_model import DiscoveryConfigurationModel
from plugins.model.discovery_configuration_update_args import DiscoveryConfigurationUpdateArgs
from plugins.model.discovery_run_args import DiscoveryRunArgs
from plugins.model.discovery_scan_type_summary import DiscoveryScanTypeSummary
from plugins.model.discovery_scanner_setting_create_args import DiscoveryScannerSettingCreateArgs
from plugins.model.discovery_scanner_setting_summary_model import DiscoveryScannerSettingSummaryModel
from plugins.model.discovery_scanner_setting_type_summary import DiscoveryScannerSettingTypeSummary
from plugins.model.discovery_scanner_setting_view_model import DiscoveryScannerSettingViewModel
from plugins.model.discovery_source_create_args import DiscoverySourceCreateArgs
from plugins.model.discovery_source_filter_patch_args import DiscoverySourceFilterPatchArgs
from plugins.model.discovery_source_filters_update_args import DiscoverySourceFiltersUpdateArgs
from plugins.model.discovery_source_model import DiscoverySourceModel
from plugins.model.discovery_source_update_args import DiscoverySourceUpdateArgs
from plugins.model.discovery_status_model import DiscoveryStatusModel
from plugins.model.domain_discovery_scope_filter_model import DomainDiscoveryScopeFilterModel
from plugins.model.domain_discovery_scope_model import DomainDiscoveryScopeModel
from plugins.model.i_paging_of_discovery_source_audit_model import IPagingOfDiscoverySourceAuditModel
from plugins.model.internal_server_error_response import InternalServerErrorResponse
from plugins.model.ou_model import OUModel
from plugins.model.paging_of_discovery_source_summary_model import PagingOfDiscoverySourceSummaryModel


class DiscoveryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.discovery_service_create_discovery_source_endpoint = _Endpoint(
            settings={
                'response_type': (DiscoverySourceModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/source',
                'operation_id': 'discovery_service_create_discovery_source',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'discovery_source_create_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'discovery_source_create_args':
                        (DiscoverySourceCreateArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'discovery_source_create_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.discovery_service_create_discovery_source_scanner_settings_endpoint = _Endpoint(
            settings={
                'response_type': (DiscoveryScannerSettingViewModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/source/{discoverySourceId}/scanner-settings',
                'operation_id': 'discovery_service_create_discovery_source_scanner_settings',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'discovery_source_id',
                    'discovery_scanner_setting_create_args',
                ],
                'required': [
                    'discovery_source_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'discovery_source_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'discovery_scanner_setting_create_args':
                        (DiscoveryScannerSettingCreateArgs,),
                },
                'attribute_map': {
                    'discovery_source_id': 'discoverySourceId',
                },
                'location_map': {
                    'discovery_source_id': 'path',
                    'discovery_scanner_setting_create_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.discovery_service_get_available_discovery_source_scanners_endpoint = _Endpoint(
            settings={
                'response_type': ([DiscoveryScannerSettingTypeSummary],),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/source/{discoverySourceId}/available-scanners',
                'operation_id': 'discovery_service_get_available_discovery_source_scanners',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'discovery_source_id',
                ],
                'required': [
                    'discovery_source_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'discovery_source_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'discovery_source_id': 'discoverySourceId',
                },
                'location_map': {
                    'discovery_source_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.discovery_service_get_discovery_configuration_endpoint = _Endpoint(
            settings={
                'response_type': (DiscoveryConfigurationModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/configuration',
                'operation_id': 'discovery_service_get_discovery_configuration',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.discovery_service_get_discovery_source_endpoint = _Endpoint(
            settings={
                'response_type': (DiscoverySourceModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/source/{id}',
                'operation_id': 'discovery_service_get_discovery_source',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.discovery_service_get_discovery_source_audits_endpoint = _Endpoint(
            settings={
                'response_type': (IPagingOfDiscoverySourceAuditModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery-source/audit',
                'operation_id': 'discovery_service_get_discovery_source_audits',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'is_exporting',
                    'filter_discovery_source_id',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'is_exporting':
                        (bool,),
                    'filter_discovery_source_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'is_exporting': 'isExporting',
                    'filter_discovery_source_id': 'filter.discoverySourceId',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'is_exporting': 'query',
                    'filter_discovery_source_id': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.discovery_service_get_discovery_source_filter_endpoint = _Endpoint(
            settings={
                'response_type': (DomainDiscoveryScopeModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/source/{id}/filter',
                'operation_id': 'discovery_service_get_discovery_source_filter',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.discovery_service_get_discovery_source_stub_endpoint = _Endpoint(
            settings={
                'response_type': (DiscoverySourceModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/source/stub/{typeId}',
                'operation_id': 'discovery_service_get_discovery_source_stub',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'type_id',
                ],
                'required': [
                    'type_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'type_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'type_id': 'typeId',
                },
                'location_map': {
                    'type_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.discovery_service_get_discovery_status_endpoint = _Endpoint(
            settings={
                'response_type': (DiscoveryStatusModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/status',
                'operation_id': 'discovery_service_get_discovery_status',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.discovery_service_get_scan_types_endpoint = _Endpoint(
            settings={
                'response_type': ([DiscoveryScanTypeSummary],),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/scan-types',
                'operation_id': 'discovery_service_get_scan_types',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.discovery_service_patch_discovery_source_filter_endpoint = _Endpoint(
            settings={
                'response_type': (DomainDiscoveryScopeFilterModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/source/{discoverySourceId}/filter/{memberId}',
                'operation_id': 'discovery_service_patch_discovery_source_filter',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'discovery_source_id',
                    'member_id',
                    'discovery_source_filter_patch_args',
                ],
                'required': [
                    'discovery_source_id',
                    'member_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'discovery_source_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'member_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'discovery_source_filter_patch_args':
                        (DiscoverySourceFilterPatchArgs,),
                },
                'attribute_map': {
                    'discovery_source_id': 'discoverySourceId',
                    'member_id': 'memberId',
                },
                'location_map': {
                    'discovery_source_id': 'path',
                    'member_id': 'path',
                    'discovery_source_filter_patch_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.discovery_service_run_discovery_now_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/run',
                'operation_id': 'discovery_service_run_discovery_now',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'discovery_run_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'discovery_run_args':
                        (DiscoveryRunArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'discovery_run_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.discovery_service_search_discovery_source_scanner_settings_endpoint = _Endpoint(
            settings={
                'response_type': ([DiscoveryScannerSettingSummaryModel],),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/source/{discoverySourceId}/scanner-settings/search',
                'operation_id': 'discovery_service_search_discovery_source_scanner_settings',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'discovery_source_id',
                ],
                'required': [
                    'discovery_source_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'discovery_source_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'discovery_source_id': 'discoverySourceId',
                },
                'location_map': {
                    'discovery_source_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.discovery_service_search_discovery_sources_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfDiscoverySourceSummaryModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/sources',
                'operation_id': 'discovery_service_search_discovery_sources',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'filter_discovery_source_name',
                    'filter_discovery_source_type',
                    'filter_include_active',
                    'filter_include_inactive',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'filter_discovery_source_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_discovery_source_type':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_include_active':
                        (bool,),
                    'filter_include_inactive':
                        (bool,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'filter_discovery_source_name': 'filter.discoverySourceName',
                    'filter_discovery_source_type': 'filter.discoverySourceType',
                    'filter_include_active': 'filter.includeActive',
                    'filter_include_inactive': 'filter.includeInactive',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'filter_discovery_source_name': 'query',
                    'filter_discovery_source_type': 'query',
                    'filter_include_active': 'query',
                    'filter_include_inactive': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.discovery_service_search_for_domain_ou_endpoint = _Endpoint(
            settings={
                'response_type': ([OUModel],),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/source/{discoverySourceId}/ou',
                'operation_id': 'discovery_service_search_for_domain_ou',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'discovery_source_id',
                    'include',
                    'search_text',
                    'selected_ids',
                    'take',
                ],
                'required': [
                    'discovery_source_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'discovery_source_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'include':
                        (bool,),
                    'search_text':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'selected_ids':
                        ([bool, date, datetime, dict, float, int, list, str, none_type],),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'discovery_source_id': 'discoverySourceId',
                    'include': 'include',
                    'search_text': 'searchText',
                    'selected_ids': 'selectedIds',
                    'take': 'take',
                },
                'location_map': {
                    'discovery_source_id': 'path',
                    'include': 'query',
                    'search_text': 'query',
                    'selected_ids': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                    'selected_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.discovery_service_update_discovery_configuration_endpoint = _Endpoint(
            settings={
                'response_type': (DiscoveryConfigurationModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/configuration',
                'operation_id': 'discovery_service_update_discovery_configuration',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'discovery_configuration_update_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'discovery_configuration_update_args':
                        (DiscoveryConfigurationUpdateArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'discovery_configuration_update_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.discovery_service_update_discovery_source_endpoint = _Endpoint(
            settings={
                'response_type': (DiscoverySourceModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/source/{id}',
                'operation_id': 'discovery_service_update_discovery_source',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'discovery_source_update_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'discovery_source_update_args':
                        (DiscoverySourceUpdateArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'discovery_source_update_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.discovery_service_update_discovery_source_filters_endpoint = _Endpoint(
            settings={
                'response_type': (DomainDiscoveryScopeModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/discovery/source/{discoverySourceId}/filters',
                'operation_id': 'discovery_service_update_discovery_source_filters',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'discovery_source_id',
                    'discovery_source_filters_update_args',
                ],
                'required': [
                    'discovery_source_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'discovery_source_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'discovery_source_filters_update_args':
                        (DiscoverySourceFiltersUpdateArgs,),
                },
                'attribute_map': {
                    'discovery_source_id': 'discoverySourceId',
                },
                'location_map': {
                    'discovery_source_id': 'path',
                    'discovery_source_filters_update_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def discovery_service_create_discovery_source(
        self,
        **kwargs
    ):
        """Create a new discovery source  # noqa: E501

        Creates a new discovery source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_create_discovery_source(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            discovery_source_create_args (DiscoverySourceCreateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DiscoverySourceModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.discovery_service_create_discovery_source_endpoint.call_with_http_info(**kwargs)

    def discovery_service_create_discovery_source_scanner_settings(
        self,
        discovery_source_id,
        **kwargs
    ):
        """Create scanner setting  # noqa: E501

        Create a scanner setting on a discovery source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_create_discovery_source_scanner_settings(discovery_source_id, async_req=True)
        >>> result = thread.get()

        Args:
            discovery_source_id (bool, date, datetime, dict, float, int, list, str, none_type): discoverySourceId

        Keyword Args:
            discovery_scanner_setting_create_args (DiscoveryScannerSettingCreateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DiscoveryScannerSettingViewModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['discovery_source_id'] = \
            discovery_source_id
        return self.discovery_service_create_discovery_source_scanner_settings_endpoint.call_with_http_info(**kwargs)

    def discovery_service_get_available_discovery_source_scanners(
        self,
        discovery_source_id,
        **kwargs
    ):
        """Get Discovery Source Available Scanners  # noqa: E501

        Get all of the scanners that can be created for this specific discovery source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_get_available_discovery_source_scanners(discovery_source_id, async_req=True)
        >>> result = thread.get()

        Args:
            discovery_source_id (bool, date, datetime, dict, float, int, list, str, none_type): discoverySourceId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [DiscoveryScannerSettingTypeSummary]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['discovery_source_id'] = \
            discovery_source_id
        return self.discovery_service_get_available_discovery_source_scanners_endpoint.call_with_http_info(**kwargs)

    def discovery_service_get_discovery_configuration(
        self,
        **kwargs
    ):
        """Get Discovery Configuration  # noqa: E501

        Get Discovery Configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_get_discovery_configuration(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DiscoveryConfigurationModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.discovery_service_get_discovery_configuration_endpoint.call_with_http_info(**kwargs)

    def discovery_service_get_discovery_source(
        self,
        id,
        **kwargs
    ):
        """Get discovery source  # noqa: E501

        Returns the discovery source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_get_discovery_source(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Discovery Source ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DiscoverySourceModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.discovery_service_get_discovery_source_endpoint.call_with_http_info(**kwargs)

    def discovery_service_get_discovery_source_audits(
        self,
        **kwargs
    ):
        """Get Discovery Source Audits  # noqa: E501

        Get Discovery Source Audits  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_get_discovery_source_audits(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            is_exporting (bool): isExporting. [optional]
            filter_discovery_source_id (bool, date, datetime, dict, float, int, list, str, none_type): DiscoverySourceId. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            IPagingOfDiscoverySourceAuditModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.discovery_service_get_discovery_source_audits_endpoint.call_with_http_info(**kwargs)

    def discovery_service_get_discovery_source_filter(
        self,
        id,
        **kwargs
    ):
        """Get the source filter for a discovery source  # noqa: E501

        Get the source filter for a discovery source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_get_discovery_source_filter(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DomainDiscoveryScopeModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.discovery_service_get_discovery_source_filter_endpoint.call_with_http_info(**kwargs)

    def discovery_service_get_discovery_source_stub(
        self,
        type_id,
        **kwargs
    ):
        """Get a Discovery Source Stub  # noqa: E501

        Get a Discovery Source Stub  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_get_discovery_source_stub(type_id, async_req=True)
        >>> result = thread.get()

        Args:
            type_id (bool, date, datetime, dict, float, int, list, str, none_type): Discovery Source Type ID

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DiscoverySourceModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['type_id'] = \
            type_id
        return self.discovery_service_get_discovery_source_stub_endpoint.call_with_http_info(**kwargs)

    def discovery_service_get_discovery_status(
        self,
        **kwargs
    ):
        """Get Discovery Status  # noqa: E501

        Get Discovery Status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_get_discovery_status(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DiscoveryStatusModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.discovery_service_get_discovery_status_endpoint.call_with_http_info(**kwargs)

    def discovery_service_get_scan_types(
        self,
        **kwargs
    ):
        """Get Discovery Scan Types  # noqa: E501

        Get all of the scan types  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_get_scan_types(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [DiscoveryScanTypeSummary]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.discovery_service_get_scan_types_endpoint.call_with_http_info(**kwargs)

    def discovery_service_patch_discovery_source_filter(
        self,
        discovery_source_id,
        member_id,
        **kwargs
    ):
        """Patches discovery source filter  # noqa: E501

        Patches the properties on a single discovery source filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_patch_discovery_source_filter(discovery_source_id, member_id, async_req=True)
        >>> result = thread.get()

        Args:
            discovery_source_id (bool, date, datetime, dict, float, int, list, str, none_type): discoverySourceId
            member_id (bool, date, datetime, dict, float, int, list, str, none_type): memberId

        Keyword Args:
            discovery_source_filter_patch_args (DiscoverySourceFilterPatchArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DomainDiscoveryScopeFilterModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['discovery_source_id'] = \
            discovery_source_id
        kwargs['member_id'] = \
            member_id
        return self.discovery_service_patch_discovery_source_filter_endpoint.call_with_http_info(**kwargs)

    def discovery_service_run_discovery_now(
        self,
        **kwargs
    ):
        """Run a discovery command  # noqa: E501

        Run a discovery command  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_run_discovery_now(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            discovery_run_args (DiscoveryRunArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.discovery_service_run_discovery_now_endpoint.call_with_http_info(**kwargs)

    def discovery_service_search_discovery_source_scanner_settings(
        self,
        discovery_source_id,
        **kwargs
    ):
        """Get Scanner Settings  # noqa: E501

        Get all of the scanner settings for a specific discovery source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_search_discovery_source_scanner_settings(discovery_source_id, async_req=True)
        >>> result = thread.get()

        Args:
            discovery_source_id (bool, date, datetime, dict, float, int, list, str, none_type): discoverySourceId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [DiscoveryScannerSettingSummaryModel]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['discovery_source_id'] = \
            discovery_source_id
        return self.discovery_service_search_discovery_source_scanner_settings_endpoint.call_with_http_info(**kwargs)

    def discovery_service_search_discovery_sources(
        self,
        **kwargs
    ):
        """Get discovery sources  # noqa: E501

        Returns discovery sources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_search_discovery_sources(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            filter_discovery_source_name (bool, date, datetime, dict, float, int, list, str, none_type): DiscoverySourceName. [optional]
            filter_discovery_source_type (bool, date, datetime, dict, float, int, list, str, none_type): DiscoverySourceType. [optional]
            filter_include_active (bool): IncludeActive. [optional]
            filter_include_inactive (bool): IncludeInactive. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfDiscoverySourceSummaryModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.discovery_service_search_discovery_sources_endpoint.call_with_http_info(**kwargs)

    def discovery_service_search_for_domain_ou(
        self,
        discovery_source_id,
        **kwargs
    ):
        """Get and include or exclude for discovery  # noqa: E501

        Returns the discovery source OU  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_search_for_domain_ou(discovery_source_id, async_req=True)
        >>> result = thread.get()

        Args:
            discovery_source_id (bool, date, datetime, dict, float, int, list, str, none_type): discoverySourceId

        Keyword Args:
            include (bool): Only return items that can be included. [optional]
            search_text (bool, date, datetime, dict, float, int, list, str, none_type): Search for OU items containing this text. [optional]
            selected_ids ([bool, date, datetime, dict, float, int, list, str, none_type]): When include is false only include items within these exisitng IDs. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): The number of items to return. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [OUModel]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['discovery_source_id'] = \
            discovery_source_id
        return self.discovery_service_search_for_domain_ou_endpoint.call_with_http_info(**kwargs)

    def discovery_service_update_discovery_configuration(
        self,
        **kwargs
    ):
        """Update discovery configuration  # noqa: E501

        Update discovery configuration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_update_discovery_configuration(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            discovery_configuration_update_args (DiscoveryConfigurationUpdateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DiscoveryConfigurationModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.discovery_service_update_discovery_configuration_endpoint.call_with_http_info(**kwargs)

    def discovery_service_update_discovery_source(
        self,
        id,
        **kwargs
    ):
        """Update a discovery source  # noqa: E501

        Update an existing discovery source using the existing discovery source ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_update_discovery_source(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Discovery Source ID

        Keyword Args:
            discovery_source_update_args (DiscoverySourceUpdateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DiscoverySourceModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.discovery_service_update_discovery_source_endpoint.call_with_http_info(**kwargs)

    def discovery_service_update_discovery_source_filters(
        self,
        discovery_source_id,
        **kwargs
    ):
        """Updates discovery source filters  # noqa: E501

        Updates the full collection of discovery source filters for a discovery source  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.discovery_service_update_discovery_source_filters(discovery_source_id, async_req=True)
        >>> result = thread.get()

        Args:
            discovery_source_id (bool, date, datetime, dict, float, int, list, str, none_type): discoverySourceId

        Keyword Args:
            discovery_source_filters_update_args (DiscoverySourceFiltersUpdateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DomainDiscoveryScopeModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['discovery_source_id'] = \
            discovery_source_id
        return self.discovery_service_update_discovery_source_filters_endpoint.call_with_http_info(**kwargs)

