"""
    Secret Server Rest API

    REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 11.2.2
    Contact: info@authomize.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from plugins.api_client import ApiClient, Endpoint as _Endpoint
from plugins.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from plugins.model.authentication_failed_response import AuthenticationFailedResponse
from plugins.model.bad_request_response import BadRequestResponse
from plugins.model.inbox_rule_action_patch_args import InboxRuleActionPatchArgs
from plugins.model.inbox_rule_condition_create_args import InboxRuleConditionCreateArgs
from plugins.model.inbox_rule_condition_detail_model import InboxRuleConditionDetailModel
from plugins.model.inbox_rule_condition_summary import InboxRuleConditionSummary
from plugins.model.inbox_rule_condition_update_args import InboxRuleConditionUpdateArgs
from plugins.model.inbox_rule_copy_args import InboxRuleCopyArgs
from plugins.model.inbox_rule_create_args import InboxRuleCreateArgs
from plugins.model.inbox_rule_detail_model import InboxRuleDetailModel
from plugins.model.inbox_rule_patch_args import InboxRulePatchArgs
from plugins.model.inbox_rule_subscriber_update_response import InboxRuleSubscriberUpdateResponse
from plugins.model.inbox_rule_subscribers_patch_args import InboxRuleSubscribersPatchArgs
from plugins.model.inbox_rule_subscription_update_response import InboxRuleSubscriptionUpdateResponse
from plugins.model.internal_server_error_response import InternalServerErrorResponse
from plugins.model.paging_of_inbox_rule_log_summary import PagingOfInboxRuleLogSummary
from plugins.model.paging_of_inbox_rule_subscriber_summary import PagingOfInboxRuleSubscriberSummary
from plugins.model.paging_of_inbox_rule_summary import PagingOfInboxRuleSummary


class InboxRulesApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.inbox_rules_service_copy_inbox_rule_endpoint = _Endpoint(
            settings={
                'response_type': (InboxRuleDetailModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/copy',
                'operation_id': 'inbox_rules_service_copy_inbox_rule',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'inbox_rule_copy_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'inbox_rule_copy_args':
                        (InboxRuleCopyArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'inbox_rule_copy_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.inbox_rules_service_create_inbox_rule_endpoint = _Endpoint(
            settings={
                'response_type': (InboxRuleDetailModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules',
                'operation_id': 'inbox_rules_service_create_inbox_rule',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'inbox_rule_create_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'inbox_rule_create_args':
                        (InboxRuleCreateArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'inbox_rule_create_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.inbox_rules_service_create_inbox_rule_condition_endpoint = _Endpoint(
            settings={
                'response_type': (InboxRuleConditionDetailModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/{inboxRuleId}/conditions',
                'operation_id': 'inbox_rules_service_create_inbox_rule_condition',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'inbox_rule_id',
                    'inbox_rule_condition_create_args',
                ],
                'required': [
                    'inbox_rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'inbox_rule_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'inbox_rule_condition_create_args':
                        (InboxRuleConditionCreateArgs,),
                },
                'attribute_map': {
                    'inbox_rule_id': 'inboxRuleId',
                },
                'location_map': {
                    'inbox_rule_id': 'path',
                    'inbox_rule_condition_create_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.inbox_rules_service_get_inbox_rule_endpoint = _Endpoint(
            settings={
                'response_type': (InboxRuleDetailModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/{id}',
                'operation_id': 'inbox_rules_service_get_inbox_rule',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.inbox_rules_service_get_inbox_rule_condition_endpoint = _Endpoint(
            settings={
                'response_type': (InboxRuleConditionDetailModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/conditions/{id}',
                'operation_id': 'inbox_rules_service_get_inbox_rule_condition',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.inbox_rules_service_get_inbox_rule_stub_endpoint = _Endpoint(
            settings={
                'response_type': (InboxRuleDetailModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/stub',
                'operation_id': 'inbox_rules_service_get_inbox_rule_stub',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.inbox_rules_service_patch_inbox_rule_endpoint = _Endpoint(
            settings={
                'response_type': (InboxRuleDetailModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/{id}',
                'operation_id': 'inbox_rules_service_patch_inbox_rule',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'inbox_rule_patch_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'inbox_rule_patch_args':
                        (InboxRulePatchArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'inbox_rule_patch_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.inbox_rules_service_patch_inbox_rule_actions_endpoint = _Endpoint(
            settings={
                'response_type': (InboxRuleDetailModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/{id}/actions',
                'operation_id': 'inbox_rules_service_patch_inbox_rule_actions',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'inbox_rule_action_patch_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'inbox_rule_action_patch_args':
                        (InboxRuleActionPatchArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'inbox_rule_action_patch_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.inbox_rules_service_patch_inbox_rule_subscribers_endpoint = _Endpoint(
            settings={
                'response_type': (InboxRuleSubscriberUpdateResponse,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/{ruleId}/subscribers',
                'operation_id': 'inbox_rules_service_patch_inbox_rule_subscribers',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'rule_id',
                    'inbox_rule_subscribers_patch_args',
                ],
                'required': [
                    'rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'rule_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'inbox_rule_subscribers_patch_args':
                        (InboxRuleSubscribersPatchArgs,),
                },
                'attribute_map': {
                    'rule_id': 'ruleId',
                },
                'location_map': {
                    'rule_id': 'path',
                    'inbox_rule_subscribers_patch_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.inbox_rules_service_search_inbox_rule_conditions_endpoint = _Endpoint(
            settings={
                'response_type': (InboxRuleConditionSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/{id}/conditions',
                'operation_id': 'inbox_rules_service_search_inbox_rule_conditions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.inbox_rules_service_search_inbox_rules_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfInboxRuleSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules',
                'operation_id': 'inbox_rules_service_search_inbox_rules',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'filter_include_current_user_subscription_status',
                    'filter_include_inactive',
                    'filter_is_immediate',
                    'filter_message_id',
                    'filter_message_type_id',
                    'rule_condition_filters_0_display_value',
                    'rule_condition_filters_0_inbox_data_id',
                    'rule_condition_filters_0_inbox_data_name',
                    'rule_condition_filters_0_value_bool',
                    'rule_condition_filters_0_value_int',
                    'rule_condition_filters_0_value_string',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'filter_include_current_user_subscription_status':
                        (bool,),
                    'filter_include_inactive':
                        (bool,),
                    'filter_is_immediate':
                        (bool,),
                    'filter_message_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_message_type_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'rule_condition_filters_0_display_value':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'rule_condition_filters_0_inbox_data_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'rule_condition_filters_0_inbox_data_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'rule_condition_filters_0_value_bool':
                        (bool,),
                    'rule_condition_filters_0_value_int':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'rule_condition_filters_0_value_string':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'filter_include_current_user_subscription_status': 'filter.includeCurrentUserSubscriptionStatus',
                    'filter_include_inactive': 'filter.includeInactive',
                    'filter_is_immediate': 'filter.isImmediate',
                    'filter_message_id': 'filter.messageId',
                    'filter_message_type_id': 'filter.messageTypeId',
                    'rule_condition_filters_0_display_value': 'ruleConditionFilters[0].displayValue',
                    'rule_condition_filters_0_inbox_data_id': 'ruleConditionFilters[0].inboxDataId',
                    'rule_condition_filters_0_inbox_data_name': 'ruleConditionFilters[0].inboxDataName',
                    'rule_condition_filters_0_value_bool': 'ruleConditionFilters[0].valueBool',
                    'rule_condition_filters_0_value_int': 'ruleConditionFilters[0].valueInt',
                    'rule_condition_filters_0_value_string': 'ruleConditionFilters[0].valueString',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'filter_include_current_user_subscription_status': 'query',
                    'filter_include_inactive': 'query',
                    'filter_is_immediate': 'query',
                    'filter_message_id': 'query',
                    'filter_message_type_id': 'query',
                    'rule_condition_filters_0_display_value': 'query',
                    'rule_condition_filters_0_inbox_data_id': 'query',
                    'rule_condition_filters_0_inbox_data_name': 'query',
                    'rule_condition_filters_0_value_bool': 'query',
                    'rule_condition_filters_0_value_int': 'query',
                    'rule_condition_filters_0_value_string': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.inbox_rules_service_search_log_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfInboxRuleLogSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/{inboxRuleId}/action-log',
                'operation_id': 'inbox_rules_service_search_log',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'inbox_rule_id',
                    'filter_end_date',
                    'filter_rule_action_status',
                    'filter_start_date',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [
                    'inbox_rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'inbox_rule_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_end_date':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_rule_action_status':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_start_date':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'inbox_rule_id': 'inboxRuleId',
                    'filter_end_date': 'filter.endDate',
                    'filter_rule_action_status': 'filter.ruleActionStatus',
                    'filter_start_date': 'filter.startDate',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'inbox_rule_id': 'path',
                    'filter_end_date': 'query',
                    'filter_rule_action_status': 'query',
                    'filter_start_date': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.inbox_rules_service_search_subscribers_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfInboxRuleSubscriberSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/{inboxRuleId}/subscribers',
                'operation_id': 'inbox_rules_service_search_subscribers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'inbox_rule_id',
                    'filter_account_types',
                    'filter_only_include_unsubscribable_users',
                    'filter_search_text',
                    'filter_status',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [
                    'inbox_rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'inbox_rule_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_account_types':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_only_include_unsubscribable_users':
                        (bool,),
                    'filter_search_text':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_status':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'inbox_rule_id': 'inboxRuleId',
                    'filter_account_types': 'filter.accountTypes',
                    'filter_only_include_unsubscribable_users': 'filter.onlyIncludeUnsubscribableUsers',
                    'filter_search_text': 'filter.searchText',
                    'filter_status': 'filter.status',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'inbox_rule_id': 'path',
                    'filter_account_types': 'query',
                    'filter_only_include_unsubscribable_users': 'query',
                    'filter_search_text': 'query',
                    'filter_status': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.inbox_rules_service_subscribe_current_user_to_rule_endpoint = _Endpoint(
            settings={
                'response_type': (InboxRuleSubscriptionUpdateResponse,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/{ruleId}/subscribe',
                'operation_id': 'inbox_rules_service_subscribe_current_user_to_rule',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'rule_id',
                ],
                'required': [
                    'rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'rule_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'rule_id': 'ruleId',
                },
                'location_map': {
                    'rule_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.inbox_rules_service_unsubscribe_current_user_from_rule_endpoint = _Endpoint(
            settings={
                'response_type': (InboxRuleSubscriptionUpdateResponse,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/{ruleId}/subscribe',
                'operation_id': 'inbox_rules_service_unsubscribe_current_user_from_rule',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'rule_id',
                ],
                'required': [
                    'rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'rule_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'rule_id': 'ruleId',
                },
                'location_map': {
                    'rule_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.inbox_rules_service_update_inbox_rule_condition_endpoint = _Endpoint(
            settings={
                'response_type': (InboxRuleDetailModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/inbox-rules/{inboxRuleId}/conditions',
                'operation_id': 'inbox_rules_service_update_inbox_rule_condition',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'inbox_rule_id',
                    'inbox_rule_condition_update_args',
                ],
                'required': [
                    'inbox_rule_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'inbox_rule_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'inbox_rule_condition_update_args':
                        (InboxRuleConditionUpdateArgs,),
                },
                'attribute_map': {
                    'inbox_rule_id': 'inboxRuleId',
                },
                'location_map': {
                    'inbox_rule_id': 'path',
                    'inbox_rule_condition_update_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def inbox_rules_service_copy_inbox_rule(
        self,
        **kwargs
    ):
        """Copy Inbox Rule  # noqa: E501

        Copy an inbox rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_copy_inbox_rule(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            inbox_rule_copy_args (InboxRuleCopyArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InboxRuleDetailModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.inbox_rules_service_copy_inbox_rule_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_create_inbox_rule(
        self,
        **kwargs
    ):
        """Create Inbox Rule  # noqa: E501

        Create a new inbox rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_create_inbox_rule(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            inbox_rule_create_args (InboxRuleCreateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InboxRuleDetailModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.inbox_rules_service_create_inbox_rule_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_create_inbox_rule_condition(
        self,
        inbox_rule_id,
        **kwargs
    ):
        """Create Inbox Rule Condition  # noqa: E501

        Create a new inbox rule condition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_create_inbox_rule_condition(inbox_rule_id, async_req=True)
        >>> result = thread.get()

        Args:
            inbox_rule_id (bool, date, datetime, dict, float, int, list, str, none_type): inboxRuleId

        Keyword Args:
            inbox_rule_condition_create_args (InboxRuleConditionCreateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InboxRuleConditionDetailModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['inbox_rule_id'] = \
            inbox_rule_id
        return self.inbox_rules_service_create_inbox_rule_condition_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_get_inbox_rule(
        self,
        id,
        **kwargs
    ):
        """Get Inbox Rule  # noqa: E501

        Retrieve inbox rule by Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_get_inbox_rule(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InboxRuleDetailModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.inbox_rules_service_get_inbox_rule_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_get_inbox_rule_condition(
        self,
        id,
        **kwargs
    ):
        """Get Inbox Rule Condition  # noqa: E501

        Retrieve inbox rule condition by Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_get_inbox_rule_condition(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InboxRuleConditionDetailModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.inbox_rules_service_get_inbox_rule_condition_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_get_inbox_rule_stub(
        self,
        **kwargs
    ):
        """Get Inbox Rule Stub  # noqa: E501

        Retrieve an empty inbox rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_get_inbox_rule_stub(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InboxRuleDetailModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.inbox_rules_service_get_inbox_rule_stub_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_patch_inbox_rule(
        self,
        id,
        **kwargs
    ):
        """Patch Inbox Rule  # noqa: E501

        Change properties of an inbox rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_patch_inbox_rule(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            inbox_rule_patch_args (InboxRulePatchArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InboxRuleDetailModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.inbox_rules_service_patch_inbox_rule_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_patch_inbox_rule_actions(
        self,
        id,
        **kwargs
    ):
        """Patch Inbox Rule Actions  # noqa: E501

        Change Inbox Rule Actions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_patch_inbox_rule_actions(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            inbox_rule_action_patch_args (InboxRuleActionPatchArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InboxRuleDetailModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.inbox_rules_service_patch_inbox_rule_actions_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_patch_inbox_rule_subscribers(
        self,
        rule_id,
        **kwargs
    ):
        """Patch Inbox Rule Subscribers  # noqa: E501

        Add, Remove, or unsubscribe groups, users, and external emails to a specific rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_patch_inbox_rule_subscribers(rule_id, async_req=True)
        >>> result = thread.get()

        Args:
            rule_id (bool, date, datetime, dict, float, int, list, str, none_type): ruleId

        Keyword Args:
            inbox_rule_subscribers_patch_args (InboxRuleSubscribersPatchArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InboxRuleSubscriberUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['rule_id'] = \
            rule_id
        return self.inbox_rules_service_patch_inbox_rule_subscribers_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_search_inbox_rule_conditions(
        self,
        id,
        **kwargs
    ):
        """Search Inbox Rule Conditions  # noqa: E501

        Search Inbox Rule Conditions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_search_inbox_rule_conditions(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InboxRuleConditionSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.inbox_rules_service_search_inbox_rule_conditions_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_search_inbox_rules(
        self,
        **kwargs
    ):
        """Search inbox rules  # noqa: E501

        Search, filter, sort, and page inbox rules  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_search_inbox_rules(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            filter_include_current_user_subscription_status (bool): Return the subscription status of the current user whether subscribed directly or via a group.. [optional]
            filter_include_inactive (bool): Include inactive rules.. [optional]
            filter_is_immediate (bool): Only return rules that run immediately or on a schedule, depending on value.. [optional]
            filter_message_id (bool, date, datetime, dict, float, int, list, str, none_type): Return all rules that will apply to this message id, does not account for time or schedule.. [optional]
            filter_message_type_id (bool, date, datetime, dict, float, int, list, str, none_type): Only return rules that apply to this message type.  If a MessageId is passed then this value will be replaced with that message's MessageTypeId.. [optional]
            rule_condition_filters_0_display_value (bool, date, datetime, dict, float, int, list, str, none_type): Search specifically display values. [optional]
            rule_condition_filters_0_inbox_data_id (bool, date, datetime, dict, float, int, list, str, none_type): Which field is being searched.  This value can be null if InboxDataName is passed instead.. [optional]
            rule_condition_filters_0_inbox_data_name (bool, date, datetime, dict, float, int, list, str, none_type): Which field is being searched.  If InboxDataId is passed this value is ignored.. [optional]
            rule_condition_filters_0_value_bool (bool): Search specifically for boolean values. [optional]
            rule_condition_filters_0_value_int (bool, date, datetime, dict, float, int, list, str, none_type): Search specifically for int values. [optional]
            rule_condition_filters_0_value_string (bool, date, datetime, dict, float, int, list, str, none_type): Search specifically for string values with a partial match. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfInboxRuleSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.inbox_rules_service_search_inbox_rules_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_search_log(
        self,
        inbox_rule_id,
        **kwargs
    ):
        """Get Inbox Rule Logs By Inbox Rule Id  # noqa: E501

        Get Inbox Rule Logs By Inbox Rule Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_search_log(inbox_rule_id, async_req=True)
        >>> result = thread.get()

        Args:
            inbox_rule_id (bool, date, datetime, dict, float, int, list, str, none_type): inboxRuleId

        Keyword Args:
            filter_end_date (bool, date, datetime, dict, float, int, list, str, none_type): EndDate. [optional]
            filter_rule_action_status (bool, date, datetime, dict, float, int, list, str, none_type): RuleActionStatus. [optional]
            filter_start_date (bool, date, datetime, dict, float, int, list, str, none_type): StartDate. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfInboxRuleLogSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['inbox_rule_id'] = \
            inbox_rule_id
        return self.inbox_rules_service_search_log_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_search_subscribers(
        self,
        inbox_rule_id,
        **kwargs
    ):
        """Search inbox rule subscribers  # noqa: E501

        Search, filter, sort, and page inbox subscribers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_search_subscribers(inbox_rule_id, async_req=True)
        >>> result = thread.get()

        Args:
            inbox_rule_id (bool, date, datetime, dict, float, int, list, str, none_type): inboxRuleId

        Keyword Args:
            filter_account_types (bool, date, datetime, dict, float, int, list, str, none_type): AccountTypes. [optional]
            filter_only_include_unsubscribable_users (bool): This will ignore most other filters and return only User accounts that belong to groups that are subscribed.  The results will not include users that are directly subscribed as they must be removed from the subscription, not unsubscribed.. [optional]
            filter_search_text (bool, date, datetime, dict, float, int, list, str, none_type): Search text to filter users from the unsubscribable users. [optional]
            filter_status (bool, date, datetime, dict, float, int, list, str, none_type): Status. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfInboxRuleSubscriberSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['inbox_rule_id'] = \
            inbox_rule_id
        return self.inbox_rules_service_search_subscribers_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_subscribe_current_user_to_rule(
        self,
        rule_id,
        **kwargs
    ):
        """Subscribe Current User  # noqa: E501

        Subscribe the current user from the rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_subscribe_current_user_to_rule(rule_id, async_req=True)
        >>> result = thread.get()

        Args:
            rule_id (bool, date, datetime, dict, float, int, list, str, none_type): ruleId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InboxRuleSubscriptionUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['rule_id'] = \
            rule_id
        return self.inbox_rules_service_subscribe_current_user_to_rule_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_unsubscribe_current_user_from_rule(
        self,
        rule_id,
        **kwargs
    ):
        """Unsubscribe current user  # noqa: E501

        Unsubscribe the current user from the rule  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_unsubscribe_current_user_from_rule(rule_id, async_req=True)
        >>> result = thread.get()

        Args:
            rule_id (bool, date, datetime, dict, float, int, list, str, none_type): ruleId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InboxRuleSubscriptionUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['rule_id'] = \
            rule_id
        return self.inbox_rules_service_unsubscribe_current_user_from_rule_endpoint.call_with_http_info(**kwargs)

    def inbox_rules_service_update_inbox_rule_condition(
        self,
        inbox_rule_id,
        **kwargs
    ):
        """Update Inbox Rule Condition  # noqa: E501

        Update inbox rule condition  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.inbox_rules_service_update_inbox_rule_condition(inbox_rule_id, async_req=True)
        >>> result = thread.get()

        Args:
            inbox_rule_id (bool, date, datetime, dict, float, int, list, str, none_type): inboxRuleId

        Keyword Args:
            inbox_rule_condition_update_args (InboxRuleConditionUpdateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            InboxRuleDetailModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['inbox_rule_id'] = \
            inbox_rule_id
        return self.inbox_rules_service_update_inbox_rule_condition_endpoint.call_with_http_info(**kwargs)

