"""
    Secret Server Rest API

    REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 11.2.2
    Contact: info@authomize.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from plugins.api_client import ApiClient, Endpoint as _Endpoint
from plugins.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from plugins.model.authentication_failed_response import AuthenticationFailedResponse
from plugins.model.bad_request_response import BadRequestResponse
from plugins.model.categorized_list_item_value_result import CategorizedListItemValueResult
from plugins.model.dashboard_view_secret import DashboardViewSecret
from plugins.model.deleted_model import DeletedModel
from plugins.model.favorite_secret_args import FavoriteSecretArgs
from plugins.model.internal_server_error_response import InternalServerErrorResponse
from plugins.model.jumpbox_route_summary_model import JumpboxRouteSummaryModel
from plugins.model.paging_of_categorized_list_summary import PagingOfCategorizedListSummary
from plugins.model.paging_of_secret_audit_model import PagingOfSecretAuditModel
from plugins.model.paging_of_secret_launcher_session_summary import PagingOfSecretLauncherSessionSummary
from plugins.model.paging_of_secret_lookup import PagingOfSecretLookup
from plugins.model.paging_of_secret_summary import PagingOfSecretSummary
from plugins.model.secret_change_password_args import SecretChangePasswordArgs
from plugins.model.secret_check_out_extension_args import SecretCheckOutExtensionArgs
from plugins.model.secret_check_out_extension_response_model import SecretCheckOutExtensionResponseModel
from plugins.model.secret_create_args import SecretCreateArgs
from plugins.model.secret_detail_general_model import SecretDetailGeneralModel
from plugins.model.secret_detail_general_view_model import SecretDetailGeneralViewModel
from plugins.model.secret_detail_jumpbox_update_args import SecretDetailJumpboxUpdateArgs
from plugins.model.secret_detail_restricted_ssh_command_view_model import SecretDetailRestrictedSshCommandViewModel
from plugins.model.secret_detail_rpc_model import SecretDetailRpcModel
from plugins.model.secret_detail_security_model import SecretDetailSecurityModel
from plugins.model.secret_detail_security_view_model import SecretDetailSecurityViewModel
from plugins.model.secret_detail_settings_model import SecretDetailSettingsModel
from plugins.model.secret_detail_ssh_restricted_command_update_args import SecretDetailSshRestrictedCommandUpdateArgs
from plugins.model.secret_detail_state_view_model import SecretDetailStateViewModel
from plugins.model.secret_detail_stop_password_result_model import SecretDetailStopPasswordResultModel
from plugins.model.secret_detail_update_email_args import SecretDetailUpdateEmailArgs
from plugins.model.secret_detail_update_expiration_args import SecretDetailUpdateExpirationArgs
from plugins.model.secret_detail_update_general_args import SecretDetailUpdateGeneralArgs
from plugins.model.secret_detail_update_rpc_script_secrets_args import SecretDetailUpdateRpcScriptSecretsArgs
from plugins.model.secret_detail_update_security_approval_args import SecretDetailUpdateSecurityApprovalArgs
from plugins.model.secret_detail_update_security_checkout_args import SecretDetailUpdateSecurityCheckoutArgs
from plugins.model.secret_detail_update_security_general_args import SecretDetailUpdateSecurityGeneralArgs
from plugins.model.secret_item_update_args import SecretItemUpdateArgs
from plugins.model.secret_launcher_session_action_result import SecretLauncherSessionActionResult
from plugins.model.secret_launcher_session_args import SecretLauncherSessionArgs
from plugins.model.secret_list_field_list_args import SecretListFieldListArgs
from plugins.model.secret_lookup import SecretLookup
from plugins.model.secret_model import SecretModel
from plugins.model.secret_model_v2 import SecretModelV2
from plugins.model.secret_proxy_args import SecretProxyArgs
from plugins.model.secret_rdp_proxy_model import SecretRdpProxyModel
from plugins.model.secret_response_code_model import SecretResponseCodeModel
from plugins.model.secret_restricted_args import SecretRestrictedArgs
from plugins.model.secret_search_extended_args import SecretSearchExtendedArgs
from plugins.model.secret_search_extended_summary import SecretSearchExtendedSummary
from plugins.model.secret_security_update_response import SecretSecurityUpdateResponse
from plugins.model.secret_ssh_proxy_model import SecretSshProxyModel
from plugins.model.secret_ssh_terminal_args import SecretSshTerminalArgs
from plugins.model.secret_ssh_terminal_model import SecretSshTerminalModel
from plugins.model.secret_summary import SecretSummary
from plugins.model.secret_update_args import SecretUpdateArgs
from plugins.model.secrets_export_args import SecretsExportArgs
from plugins.model.secrets_export_result_model import SecretsExportResultModel
from plugins.model.widget_secret_model import WidgetSecretModel


class SecretsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.secrets_service_change_password_endpoint = _Endpoint(
            settings={
                'response_type': (SecretSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/change-password',
                'operation_id': 'secrets_service_change_password',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_change_password_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_change_password_args':
                        (SecretChangePasswordArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_change_password_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_check_in_endpoint = _Endpoint(
            settings={
                'response_type': (SecretSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/check-in',
                'operation_id': 'secrets_service_check_in',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'secret_path',
                    'secret_restricted_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_restricted_args':
                        (SecretRestrictedArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'secret_path': 'query',
                    'secret_restricted_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_check_out_endpoint = _Endpoint(
            settings={
                'response_type': (SecretResponseCodeModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/check-out',
                'operation_id': 'secrets_service_check_out',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_create_secret_endpoint = _Endpoint(
            settings={
                'response_type': (SecretModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets',
                'operation_id': 'secrets_service_create_secret',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_create_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_create_args':
                        (SecretCreateArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'secret_create_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_delete_endpoint = _Endpoint(
            settings={
                'response_type': (DeletedModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}',
                'operation_id': 'secrets_service_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_delete_list_field_list_definitions_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfCategorizedListSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/fields/{slug}/listdetails',
                'operation_id': 'secrets_service_delete_list_field_list_definitions',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'slug',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'list_guid',
                ],
                'required': [
                    'id',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'slug':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'list_guid':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'slug': 'slug',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'list_guid': 'listGuid',
                },
                'location_map': {
                    'id': 'path',
                    'slug': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'list_guid': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_expire_endpoint = _Endpoint(
            settings={
                'response_type': (SecretSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/expire',
                'operation_id': 'secrets_service_expire',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_restricted_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_restricted_args':
                        (SecretRestrictedArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_restricted_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_export_secrets_endpoint = _Endpoint(
            settings={
                'response_type': (SecretsExportResultModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/export',
                'operation_id': 'secrets_service_export_secrets',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'secrets_export_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secrets_export_args':
                        (SecretsExportArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'secrets_export_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_extend_check_out_endpoint = _Endpoint(
            settings={
                'response_type': (SecretCheckOutExtensionResponseModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/extend-check-out',
                'operation_id': 'secrets_service_extend_check_out',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'secret_check_out_extension_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_check_out_extension_args':
                        (SecretCheckOutExtensionArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                },
                'location_map': {
                    'id': 'path',
                    'secret_check_out_extension_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_favorite_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{secretId}/favorite',
                'operation_id': 'secrets_service_favorite',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_id',
                    'secret_path',
                    'favorite_secret_args',
                ],
                'required': [
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'favorite_secret_args':
                        (FavoriteSecretArgs,),
                },
                'attribute_map': {
                    'secret_id': 'secretId',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'secret_id': 'path',
                    'secret_path': 'query',
                    'favorite_secret_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_get_active_secret_sessions_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfSecretLauncherSessionSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/launcher-sessions',
                'operation_id': 'secrets_service_get_active_secret_sessions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'filter_secret_id',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'filter_secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'filter_secret_id': 'filter.secretId',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'filter_secret_id': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_get_favorites_endpoint = _Endpoint(
            settings={
                'response_type': ([WidgetSecretModel],),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/favorite',
                'operation_id': 'secrets_service_get_favorites',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_get_field_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/fields/{slug}',
                'operation_id': 'secrets_service_get_field',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'slug',
                    'include_inactive',
                    'no_auto_checkout',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                ],
                'required': [
                    'id',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'slug':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'include_inactive':
                        (bool,),
                    'no_auto_checkout':
                        (bool,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'slug': 'slug',
                    'include_inactive': 'includeInactive',
                    'no_auto_checkout': 'noAutoCheckout',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'slug': 'path',
                    'include_inactive': 'query',
                    'no_auto_checkout': 'query',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/octet-stream'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_get_general_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailGeneralModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/secret-detail/{id}/general/{isEditMode?}/{loadReadOnlyFlags?}',
                'operation_id': 'secrets_service_get_general',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'is_edit_mode',
                    'load_read_only_flags',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'is_edit_mode':
                        (bool,),
                    'load_read_only_flags':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'is_edit_mode': 'isEditMode',
                    'load_read_only_flags': 'loadReadOnlyFlags',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'is_edit_mode': 'query',
                    'load_read_only_flags': 'query',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_get_list_field_endpoint = _Endpoint(
            settings={
                'response_type': (CategorizedListItemValueResult,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/fields/{slug}/list',
                'operation_id': 'secrets_service_get_list_field',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'slug',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                ],
                'required': [
                    'id',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'slug':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'slug': 'slug',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                },
                'location_map': {
                    'id': 'path',
                    'slug': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_get_list_field_list_definitions_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfCategorizedListSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/fields/{slug}/listdetails',
                'operation_id': 'secrets_service_get_list_field_list_definitions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'slug',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [
                    'id',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'slug':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'slug': 'slug',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'id': 'path',
                    'slug': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_get_lookup_endpoint = _Endpoint(
            settings={
                'response_type': (SecretLookup,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/lookup/{id}',
                'operation_id': 'secrets_service_get_lookup',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_get_restricted_endpoint = _Endpoint(
            settings={
                'response_type': (SecretModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/restricted',
                'operation_id': 'secrets_service_get_restricted',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_restricted_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_restricted_args':
                        (SecretRestrictedArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_restricted_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_get_secret_audits_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfSecretAuditModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/audits',
                'operation_id': 'secrets_service_get_secret_audits',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'is_exporting',
                    'filter_include_password_change_log',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'is_exporting':
                        (bool,),
                    'filter_include_password_change_log':
                        (bool,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'is_exporting': 'isExporting',
                    'filter_include_password_change_log': 'filter.includePasswordChangeLog',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'is_exporting': 'query',
                    'filter_include_password_change_log': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_get_secret_extended_search_details_endpoint = _Endpoint(
            settings={
                'response_type': ([SecretSearchExtendedSummary],),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/extended-search-details',
                'operation_id': 'secrets_service_get_secret_extended_search_details',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_search_extended_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_search_extended_args':
                        (SecretSearchExtendedArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'secret_search_extended_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_get_secret_preview_endpoint = _Endpoint(
            settings={
                'response_type': (DashboardViewSecret,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/preview',
                'operation_id': 'secrets_service_get_secret_preview',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_get_secret_rdp_proxy_info_endpoint = _Endpoint(
            settings={
                'response_type': (SecretRdpProxyModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/rdpproxy',
                'operation_id': 'secrets_service_get_secret_rdp_proxy_info',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_proxy_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_proxy_args':
                        (SecretProxyArgs,),
                },
                'attribute_map': {
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                },
                'location_map': {
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_proxy_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_get_secret_settings_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailSettingsModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/settings',
                'operation_id': 'secrets_service_get_secret_settings',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_get_secret_ssh_proxy_info_endpoint = _Endpoint(
            settings={
                'response_type': (SecretSshProxyModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/sshproxy',
                'operation_id': 'secrets_service_get_secret_ssh_proxy_info',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_proxy_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_proxy_args':
                        (SecretProxyArgs,),
                },
                'attribute_map': {
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                },
                'location_map': {
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_proxy_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_get_secret_ssh_terminal_details_endpoint = _Endpoint(
            settings={
                'response_type': (SecretSshTerminalModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/sshterminal',
                'operation_id': 'secrets_service_get_secret_ssh_terminal_details',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_ssh_terminal_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_ssh_terminal_args':
                        (SecretSshTerminalArgs,),
                },
                'attribute_map': {
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                },
                'location_map': {
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_ssh_terminal_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_get_secret_state_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailStateViewModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/state',
                'operation_id': 'secrets_service_get_secret_state',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_get_secret_v2_endpoint = _Endpoint(
            settings={
                'response_type': (SecretModelV2,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v2/secrets/{id}',
                'operation_id': 'secrets_service_get_secret_v2',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'include_inactive',
                    'no_auto_checkout',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'include_inactive':
                        (bool,),
                    'no_auto_checkout':
                        (bool,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'include_inactive': 'includeInactive',
                    'no_auto_checkout': 'noAutoCheckout',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'include_inactive': 'query',
                    'no_auto_checkout': 'query',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_get_ssh_restricted_commands_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailRestrictedSshCommandViewModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/ssh-restricted-commands',
                'operation_id': 'secrets_service_get_ssh_restricted_commands',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_get_summary_endpoint = _Endpoint(
            settings={
                'response_type': (SecretSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/summary',
                'operation_id': 'secrets_service_get_summary',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_put_field_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/fields/{slug}',
                'operation_id': 'secrets_service_put_field',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'slug',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_item_update_args',
                ],
                'required': [
                    'id',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'slug':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_item_update_args':
                        (SecretItemUpdateArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'slug': 'slug',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'slug': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_item_update_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json',
                    'multipart/form-data'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_restricted_field_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/restricted/fields/{slug}',
                'operation_id': 'secrets_service_restricted_field',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'slug',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_restricted_args',
                ],
                'required': [
                    'id',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'slug':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_restricted_args':
                        (SecretRestrictedArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'slug': 'slug',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'slug': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_restricted_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/octet-stream'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_run_heart_beat_endpoint = _Endpoint(
            settings={
                'response_type': (SecretSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/heartbeat',
                'operation_id': 'secrets_service_run_heart_beat',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_search_secret_lookup_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfSecretLookup,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/lookup',
                'operation_id': 'secrets_service_search_secret_lookup',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'filter_allow_double_locks',
                    'filter_do_not_calculate_total',
                    'filter_double_lock_id',
                    'filter_extended_fields',
                    'filter_extended_type_id',
                    'filter_folder_id',
                    'filter_heartbeat_status',
                    'filter_include_active',
                    'filter_include_inactive',
                    'filter_include_restricted',
                    'filter_include_sub_folders',
                    'filter_is_exact_match',
                    'filter_only_rpc_enabled',
                    'filter_only_shared_with_me',
                    'filter_password_type_ids',
                    'filter_permission_required',
                    'filter_scope',
                    'filter_search_field',
                    'filter_search_field_slug',
                    'filter_search_text',
                    'filter_secret_template_id',
                    'filter_site_id',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'filter_allow_double_locks':
                        (bool,),
                    'filter_do_not_calculate_total':
                        (bool,),
                    'filter_double_lock_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_extended_fields':
                        ([bool, date, datetime, dict, float, int, list, str, none_type],),
                    'filter_extended_type_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_folder_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_heartbeat_status':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_include_active':
                        (bool,),
                    'filter_include_inactive':
                        (bool,),
                    'filter_include_restricted':
                        (bool,),
                    'filter_include_sub_folders':
                        (bool,),
                    'filter_is_exact_match':
                        (bool,),
                    'filter_only_rpc_enabled':
                        (bool,),
                    'filter_only_shared_with_me':
                        (bool,),
                    'filter_password_type_ids':
                        ([bool, date, datetime, dict, float, int, list, str, none_type],),
                    'filter_permission_required':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_scope':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_search_field':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_search_field_slug':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_search_text':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_secret_template_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_site_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'filter_allow_double_locks': 'filter.allowDoubleLocks',
                    'filter_do_not_calculate_total': 'filter.doNotCalculateTotal',
                    'filter_double_lock_id': 'filter.doubleLockId',
                    'filter_extended_fields': 'filter.extendedFields',
                    'filter_extended_type_id': 'filter.extendedTypeId',
                    'filter_folder_id': 'filter.folderId',
                    'filter_heartbeat_status': 'filter.heartbeatStatus',
                    'filter_include_active': 'filter.includeActive',
                    'filter_include_inactive': 'filter.includeInactive',
                    'filter_include_restricted': 'filter.includeRestricted',
                    'filter_include_sub_folders': 'filter.includeSubFolders',
                    'filter_is_exact_match': 'filter.isExactMatch',
                    'filter_only_rpc_enabled': 'filter.onlyRPCEnabled',
                    'filter_only_shared_with_me': 'filter.onlySharedWithMe',
                    'filter_password_type_ids': 'filter.passwordTypeIds',
                    'filter_permission_required': 'filter.permissionRequired',
                    'filter_scope': 'filter.scope',
                    'filter_search_field': 'filter.searchField',
                    'filter_search_field_slug': 'filter.searchFieldSlug',
                    'filter_search_text': 'filter.searchText',
                    'filter_secret_template_id': 'filter.secretTemplateId',
                    'filter_site_id': 'filter.siteId',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'filter_allow_double_locks': 'query',
                    'filter_do_not_calculate_total': 'query',
                    'filter_double_lock_id': 'query',
                    'filter_extended_fields': 'query',
                    'filter_extended_type_id': 'query',
                    'filter_folder_id': 'query',
                    'filter_heartbeat_status': 'query',
                    'filter_include_active': 'query',
                    'filter_include_inactive': 'query',
                    'filter_include_restricted': 'query',
                    'filter_include_sub_folders': 'query',
                    'filter_is_exact_match': 'query',
                    'filter_only_rpc_enabled': 'query',
                    'filter_only_shared_with_me': 'query',
                    'filter_password_type_ids': 'query',
                    'filter_permission_required': 'query',
                    'filter_scope': 'query',
                    'filter_search_field': 'query',
                    'filter_search_field_slug': 'query',
                    'filter_search_text': 'query',
                    'filter_secret_template_id': 'query',
                    'filter_site_id': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                    'filter_extended_fields': 'multi',
                    'filter_password_type_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_search_total_v2_endpoint = _Endpoint(
            settings={
                'response_type': (bool, date, datetime, dict, float, int, list, str, none_type,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v2/secrets/search-total',
                'operation_id': 'secrets_service_search_total_v2',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'filter_allow_double_locks',
                    'filter_do_not_calculate_total',
                    'filter_double_lock_id',
                    'filter_extended_fields',
                    'filter_extended_type_id',
                    'filter_folder_id',
                    'filter_has_launcher',
                    'filter_heartbeat_status',
                    'filter_include_active',
                    'filter_include_inactive',
                    'filter_include_restricted',
                    'filter_include_sub_folders',
                    'filter_is_exact_match',
                    'filter_only_rpc_enabled',
                    'filter_only_shared_with_me',
                    'filter_password_type_ids',
                    'filter_permission_required',
                    'filter_scope',
                    'filter_search_field',
                    'filter_search_field_slug',
                    'filter_search_text',
                    'filter_secret_template_ids',
                    'filter_site_id',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'filter_allow_double_locks':
                        (bool,),
                    'filter_do_not_calculate_total':
                        (bool,),
                    'filter_double_lock_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_extended_fields':
                        ([bool, date, datetime, dict, float, int, list, str, none_type],),
                    'filter_extended_type_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_folder_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_has_launcher':
                        (bool,),
                    'filter_heartbeat_status':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_include_active':
                        (bool,),
                    'filter_include_inactive':
                        (bool,),
                    'filter_include_restricted':
                        (bool,),
                    'filter_include_sub_folders':
                        (bool,),
                    'filter_is_exact_match':
                        (bool,),
                    'filter_only_rpc_enabled':
                        (bool,),
                    'filter_only_shared_with_me':
                        (bool,),
                    'filter_password_type_ids':
                        ([bool, date, datetime, dict, float, int, list, str, none_type],),
                    'filter_permission_required':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_scope':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_search_field':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_search_field_slug':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_search_text':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_secret_template_ids':
                        ([bool, date, datetime, dict, float, int, list, str, none_type],),
                    'filter_site_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'filter_allow_double_locks': 'filter.allowDoubleLocks',
                    'filter_do_not_calculate_total': 'filter.doNotCalculateTotal',
                    'filter_double_lock_id': 'filter.doubleLockId',
                    'filter_extended_fields': 'filter.extendedFields',
                    'filter_extended_type_id': 'filter.extendedTypeId',
                    'filter_folder_id': 'filter.folderId',
                    'filter_has_launcher': 'filter.hasLauncher',
                    'filter_heartbeat_status': 'filter.heartbeatStatus',
                    'filter_include_active': 'filter.includeActive',
                    'filter_include_inactive': 'filter.includeInactive',
                    'filter_include_restricted': 'filter.includeRestricted',
                    'filter_include_sub_folders': 'filter.includeSubFolders',
                    'filter_is_exact_match': 'filter.isExactMatch',
                    'filter_only_rpc_enabled': 'filter.onlyRPCEnabled',
                    'filter_only_shared_with_me': 'filter.onlySharedWithMe',
                    'filter_password_type_ids': 'filter.passwordTypeIds',
                    'filter_permission_required': 'filter.permissionRequired',
                    'filter_scope': 'filter.scope',
                    'filter_search_field': 'filter.searchField',
                    'filter_search_field_slug': 'filter.searchFieldSlug',
                    'filter_search_text': 'filter.searchText',
                    'filter_secret_template_ids': 'filter.secretTemplateIds',
                    'filter_site_id': 'filter.siteId',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'filter_allow_double_locks': 'query',
                    'filter_do_not_calculate_total': 'query',
                    'filter_double_lock_id': 'query',
                    'filter_extended_fields': 'query',
                    'filter_extended_type_id': 'query',
                    'filter_folder_id': 'query',
                    'filter_has_launcher': 'query',
                    'filter_heartbeat_status': 'query',
                    'filter_include_active': 'query',
                    'filter_include_inactive': 'query',
                    'filter_include_restricted': 'query',
                    'filter_include_sub_folders': 'query',
                    'filter_is_exact_match': 'query',
                    'filter_only_rpc_enabled': 'query',
                    'filter_only_shared_with_me': 'query',
                    'filter_password_type_ids': 'query',
                    'filter_permission_required': 'query',
                    'filter_scope': 'query',
                    'filter_search_field': 'query',
                    'filter_search_field_slug': 'query',
                    'filter_search_text': 'query',
                    'filter_secret_template_ids': 'query',
                    'filter_site_id': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                    'filter_extended_fields': 'multi',
                    'filter_password_type_ids': 'multi',
                    'filter_secret_template_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_search_v2_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfSecretSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v2/secrets',
                'operation_id': 'secrets_service_search_v2',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'filter_allow_double_locks',
                    'filter_do_not_calculate_total',
                    'filter_double_lock_id',
                    'filter_extended_fields',
                    'filter_extended_type_id',
                    'filter_folder_id',
                    'filter_has_launcher',
                    'filter_heartbeat_status',
                    'filter_include_active',
                    'filter_include_inactive',
                    'filter_include_restricted',
                    'filter_include_sub_folders',
                    'filter_is_exact_match',
                    'filter_only_rpc_enabled',
                    'filter_only_shared_with_me',
                    'filter_password_type_ids',
                    'filter_permission_required',
                    'filter_scope',
                    'filter_search_field',
                    'filter_search_field_slug',
                    'filter_search_text',
                    'filter_secret_template_ids',
                    'filter_site_id',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'filter_allow_double_locks':
                        (bool,),
                    'filter_do_not_calculate_total':
                        (bool,),
                    'filter_double_lock_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_extended_fields':
                        ([bool, date, datetime, dict, float, int, list, str, none_type],),
                    'filter_extended_type_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_folder_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_has_launcher':
                        (bool,),
                    'filter_heartbeat_status':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_include_active':
                        (bool,),
                    'filter_include_inactive':
                        (bool,),
                    'filter_include_restricted':
                        (bool,),
                    'filter_include_sub_folders':
                        (bool,),
                    'filter_is_exact_match':
                        (bool,),
                    'filter_only_rpc_enabled':
                        (bool,),
                    'filter_only_shared_with_me':
                        (bool,),
                    'filter_password_type_ids':
                        ([bool, date, datetime, dict, float, int, list, str, none_type],),
                    'filter_permission_required':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_scope':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_search_field':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_search_field_slug':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_search_text':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_secret_template_ids':
                        ([bool, date, datetime, dict, float, int, list, str, none_type],),
                    'filter_site_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'filter_allow_double_locks': 'filter.allowDoubleLocks',
                    'filter_do_not_calculate_total': 'filter.doNotCalculateTotal',
                    'filter_double_lock_id': 'filter.doubleLockId',
                    'filter_extended_fields': 'filter.extendedFields',
                    'filter_extended_type_id': 'filter.extendedTypeId',
                    'filter_folder_id': 'filter.folderId',
                    'filter_has_launcher': 'filter.hasLauncher',
                    'filter_heartbeat_status': 'filter.heartbeatStatus',
                    'filter_include_active': 'filter.includeActive',
                    'filter_include_inactive': 'filter.includeInactive',
                    'filter_include_restricted': 'filter.includeRestricted',
                    'filter_include_sub_folders': 'filter.includeSubFolders',
                    'filter_is_exact_match': 'filter.isExactMatch',
                    'filter_only_rpc_enabled': 'filter.onlyRPCEnabled',
                    'filter_only_shared_with_me': 'filter.onlySharedWithMe',
                    'filter_password_type_ids': 'filter.passwordTypeIds',
                    'filter_permission_required': 'filter.permissionRequired',
                    'filter_scope': 'filter.scope',
                    'filter_search_field': 'filter.searchField',
                    'filter_search_field_slug': 'filter.searchFieldSlug',
                    'filter_search_text': 'filter.searchText',
                    'filter_secret_template_ids': 'filter.secretTemplateIds',
                    'filter_site_id': 'filter.siteId',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'filter_allow_double_locks': 'query',
                    'filter_do_not_calculate_total': 'query',
                    'filter_double_lock_id': 'query',
                    'filter_extended_fields': 'query',
                    'filter_extended_type_id': 'query',
                    'filter_folder_id': 'query',
                    'filter_has_launcher': 'query',
                    'filter_heartbeat_status': 'query',
                    'filter_include_active': 'query',
                    'filter_include_inactive': 'query',
                    'filter_include_restricted': 'query',
                    'filter_include_sub_folders': 'query',
                    'filter_is_exact_match': 'query',
                    'filter_only_rpc_enabled': 'query',
                    'filter_only_shared_with_me': 'query',
                    'filter_password_type_ids': 'query',
                    'filter_permission_required': 'query',
                    'filter_scope': 'query',
                    'filter_search_field': 'query',
                    'filter_search_field_slug': 'query',
                    'filter_search_text': 'query',
                    'filter_secret_template_ids': 'query',
                    'filter_site_id': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                    'filter_extended_fields': 'multi',
                    'filter_password_type_ids': 'multi',
                    'filter_secret_template_ids': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_stop_password_change_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailStopPasswordResultModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/stop-password-change',
                'operation_id': 'secrets_service_stop_password_change',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_stub_endpoint = _Endpoint(
            settings={
                'response_type': (SecretModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/stub',
                'operation_id': 'secrets_service_stub',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_template_id',
                    'folder_id',
                ],
                'required': [
                    'secret_template_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_template_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'folder_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'secret_template_id': 'secretTemplateId',
                    'folder_id': 'folderId',
                },
                'location_map': {
                    'secret_template_id': 'query',
                    'folder_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_undelete_secret_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailGeneralModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/activate',
                'operation_id': 'secrets_service_undelete_secret',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_undelete_secret_v2_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailGeneralModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v2/secrets/{id}/activate',
                'operation_id': 'secrets_service_undelete_secret_v2',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'secret_path',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'id': 'id',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'secret_path': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.secrets_service_update_email_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailSettingsModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/email',
                'operation_id': 'secrets_service_update_email',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_detail_update_email_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_update_email_args':
                        (SecretDetailUpdateEmailArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_detail_update_email_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_email_v2_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailSettingsModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v2/secrets/{id}/email',
                'operation_id': 'secrets_service_update_email_v2',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_detail_update_email_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_update_email_args':
                        (SecretDetailUpdateEmailArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_detail_update_email_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_expiration_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailSettingsModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/expiration',
                'operation_id': 'secrets_service_update_expiration',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_detail_update_expiration_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_update_expiration_args':
                        (SecretDetailUpdateExpirationArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_detail_update_expiration_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_general_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailGeneralViewModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/general',
                'operation_id': 'secrets_service_update_general',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_detail_update_general_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_update_general_args':
                        (SecretDetailUpdateGeneralArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_detail_update_general_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_general_v2_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailGeneralModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v2/secrets/{id}/general',
                'operation_id': 'secrets_service_update_general_v2',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_detail_update_general_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_update_general_args':
                        (SecretDetailUpdateGeneralArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_detail_update_general_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_jumpbox_route_selection_endpoint = _Endpoint(
            settings={
                'response_type': (JumpboxRouteSummaryModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secret-detail/{secretId}/jumpbox-route-selection',
                'operation_id': 'secrets_service_update_jumpbox_route_selection',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_id',
                    'secret_detail_jumpbox_update_args',
                ],
                'required': [
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_jumpbox_update_args':
                        (SecretDetailJumpboxUpdateArgs,),
                },
                'attribute_map': {
                    'secret_id': 'secretId',
                },
                'location_map': {
                    'secret_id': 'path',
                    'secret_detail_jumpbox_update_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_list_field_list_definitions_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfCategorizedListSummary,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/fields/{slug}/listdetails',
                'operation_id': 'secrets_service_update_list_field_list_definitions',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'slug',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_list_field_list_args',
                ],
                'required': [
                    'id',
                    'slug',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'slug':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_list_field_list_args':
                        (SecretListFieldListArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'slug': 'slug',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                },
                'location_map': {
                    'id': 'path',
                    'slug': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_list_field_list_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_rpc_script_secrets_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailRpcModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/rpc-script-secrets',
                'operation_id': 'secrets_service_update_rpc_script_secrets',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_detail_update_rpc_script_secrets_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_update_rpc_script_secrets_args':
                        (SecretDetailUpdateRpcScriptSecretsArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_detail_update_rpc_script_secrets_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_rpc_script_secrets_v2_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailRpcModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v2/secrets/{id}/rpc-script-secrets',
                'operation_id': 'secrets_service_update_rpc_script_secrets_v2',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_detail_update_rpc_script_secrets_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_update_rpc_script_secrets_args':
                        (SecretDetailUpdateRpcScriptSecretsArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_detail_update_rpc_script_secrets_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_secret_endpoint = _Endpoint(
            settings={
                'response_type': (SecretModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}',
                'operation_id': 'secrets_service_update_secret',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_update_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_update_args':
                        (SecretUpdateArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_update_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_secret_session_endpoint = _Endpoint(
            settings={
                'response_type': (SecretLauncherSessionActionResult,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/launcher-sessions',
                'operation_id': 'secrets_service_update_secret_session',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_launcher_session_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_launcher_session_args':
                        (SecretLauncherSessionArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'secret_launcher_session_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_security_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailSecurityViewModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{id}/security-general',
                'operation_id': 'secrets_service_update_security',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_detail_update_security_general_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_update_security_general_args':
                        (SecretDetailUpdateSecurityGeneralArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_detail_update_security_general_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_security_approval_v3_endpoint = _Endpoint(
            settings={
                'response_type': (SecretSecurityUpdateResponse,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v3/secrets/{id}/security-approval',
                'operation_id': 'secrets_service_update_security_approval_v3',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_detail_update_security_approval_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_update_security_approval_args':
                        (SecretDetailUpdateSecurityApprovalArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_detail_update_security_approval_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_security_checkout_v3_endpoint = _Endpoint(
            settings={
                'response_type': (SecretSecurityUpdateResponse,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v3/secrets/{id}/security-checkout',
                'operation_id': 'secrets_service_update_security_checkout_v3',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_detail_update_security_checkout_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_update_security_checkout_args':
                        (SecretDetailUpdateSecurityCheckoutArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_detail_update_security_checkout_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_security_v2_endpoint = _Endpoint(
            settings={
                'response_type': (SecretDetailSecurityModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v2/secrets/{id}/security-general',
                'operation_id': 'secrets_service_update_security_v2',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_path',
                    'secret_detail_update_security_general_args',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_path':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'secret_detail_update_security_general_args':
                        (SecretDetailUpdateSecurityGeneralArgs,),
                },
                'attribute_map': {
                    'id': 'id',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                    'secret_path': 'secretPath',
                },
                'location_map': {
                    'id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_path': 'query',
                    'secret_detail_update_security_general_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.secrets_service_update_ssh_restricted_commands_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/secrets/{secretId}/update-ssh-restricted-commands',
                'operation_id': 'secrets_service_update_ssh_restricted_commands',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'secret_id',
                    'auto_check_in',
                    'auto_checkout',
                    'auto_comment',
                    'force_check_in',
                    'secret_detail_ssh_restricted_command_update_args',
                ],
                'required': [
                    'secret_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'secret_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'auto_check_in':
                        (bool,),
                    'auto_checkout':
                        (bool,),
                    'auto_comment':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'force_check_in':
                        (bool,),
                    'secret_detail_ssh_restricted_command_update_args':
                        (SecretDetailSshRestrictedCommandUpdateArgs,),
                },
                'attribute_map': {
                    'secret_id': 'secretId',
                    'auto_check_in': 'autoCheckIn',
                    'auto_checkout': 'autoCheckout',
                    'auto_comment': 'autoComment',
                    'force_check_in': 'forceCheckIn',
                },
                'location_map': {
                    'secret_id': 'path',
                    'auto_check_in': 'query',
                    'auto_checkout': 'query',
                    'auto_comment': 'query',
                    'force_check_in': 'query',
                    'secret_detail_ssh_restricted_command_update_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def secrets_service_change_password(
        self,
        id,
        **kwargs
    ):
        """Change Secret Password  # noqa: E501

        Change a secret's password  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_change_password(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_change_password_args (SecretChangePasswordArgs): Secret options. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_change_password_endpoint.call_with_http_info(**kwargs)

    def secrets_service_check_in(
        self,
        id,
        **kwargs
    ):
        """Check In Secret  # noqa: E501

        Check in a secret. Checking a secret ends exclusive access to the secret and allows other users to check-out and view or edit it.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_check_in(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID

        Keyword Args:
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_restricted_args (SecretRestrictedArgs): Secret options. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_check_in_endpoint.call_with_http_info(**kwargs)

    def secrets_service_check_out(
        self,
        id,
        **kwargs
    ):
        """Check Out Secret  # noqa: E501

        Check Out a secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_check_out(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID

        Keyword Args:
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretResponseCodeModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_check_out_endpoint.call_with_http_info(**kwargs)

    def secrets_service_create_secret(
        self,
        **kwargs
    ):
        """Create Secret  # noqa: E501

        Create a new secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_create_secret(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            secret_create_args (SecretCreateArgs): Secret creation options. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secrets_service_create_secret_endpoint.call_with_http_info(**kwargs)

    def secrets_service_delete(
        self,
        id,
        **kwargs
    ):
        """Deactivate a Secret  # noqa: E501

        A deactivated secret is hidden from users who do not have a role containing the View Deleted Secrets permission. Secret Server uses these \"soft deletes\" to maintain the audit history for all data. However, deactivated secrets are still accessible by administrators (like a permanent Recycle Bin) to ensure that audit history is maintained and to support recovery. A user must have the \"View Deleted Secrets\" permission in addition to Owner permission on a secret to access the secret View page for a deleted secret. To permanently remove all information on a secret, use the \"Erase Secret\" function.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_delete(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DeletedModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_delete_endpoint.call_with_http_info(**kwargs)

    def secrets_service_delete_list_field_list_definitions(
        self,
        id,
        slug,
        **kwargs
    ):
        """Delete Secret List Field List Data  # noqa: E501

        Deletes the lists associated to a secret list data field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_delete_list_field_list_definitions(id, slug, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID
            slug (bool, date, datetime, dict, float, int, list, str, none_type): Secret field name

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            list_guid (bool, date, datetime, dict, float, int, list, str, none_type): Secret options. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfCategorizedListSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['slug'] = \
            slug
        return self.secrets_service_delete_list_field_list_definitions_endpoint.call_with_http_info(**kwargs)

    def secrets_service_expire(
        self,
        id,
        **kwargs
    ):
        """Expire Secret  # noqa: E501

        Expire a secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_expire(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_restricted_args (SecretRestrictedArgs): Secret options. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_expire_endpoint.call_with_http_info(**kwargs)

    def secrets_service_export_secrets(
        self,
        **kwargs
    ):
        """Export Secrets  # noqa: E501

        Exports secrets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_export_secrets(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            secrets_export_args (SecretsExportArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretsExportResultModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secrets_service_export_secrets_endpoint.call_with_http_info(**kwargs)

    def secrets_service_extend_check_out(
        self,
        id,
        **kwargs
    ):
        """Extend Check Out  # noqa: E501

        Extend remaining check out time.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_extend_check_out(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            secret_check_out_extension_args (SecretCheckOutExtensionArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretCheckOutExtensionResponseModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_extend_check_out_endpoint.call_with_http_info(**kwargs)

    def secrets_service_favorite(
        self,
        secret_id,
        **kwargs
    ):
        """Favorite a Secret  # noqa: E501

        Used to favorite or unfavorite an individual Secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_favorite(secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): The secret to favorite or unfavorite.

        Keyword Args:
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            favorite_secret_args (FavoriteSecretArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['secret_id'] = \
            secret_id
        return self.secrets_service_favorite_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_active_secret_sessions(
        self,
        **kwargs
    ):
        """Get Secret Launcher Sessions By Id  # noqa: E501

        Get secret launcher sessions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_active_secret_sessions(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            filter_secret_id (bool, date, datetime, dict, float, int, list, str, none_type): The Id of the associated Secret.. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfSecretLauncherSessionSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secrets_service_get_active_secret_sessions_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_favorites(
        self,
        **kwargs
    ):
        """List a User's Favorite Secrets  # noqa: E501

        Returns a list of secrets which the user has favorited.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_favorites(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [WidgetSecretModel]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secrets_service_get_favorites_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_field(
        self,
        id,
        slug,
        **kwargs
    ):
        """Get Secret Field  # noqa: E501

        Get a secret data field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_field(id, slug, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID
            slug (bool, date, datetime, dict, float, int, list, str, none_type): Secret field name

        Keyword Args:
            include_inactive (bool): Whether to include inactive secrets in the results. [optional]
            no_auto_checkout (bool): Don't check out the secret if needed. [optional]
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['slug'] = \
            slug
        return self.secrets_service_get_field_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_general(
        self,
        id,
        **kwargs
    ):
        """Get Secret Detail General  # noqa: E501

        Retrieve details about a secret.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_general(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            is_edit_mode (bool): isEditMode. [optional]
            load_read_only_flags (bool): loadReadOnlyFlags. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailGeneralModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_get_general_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_list_field(
        self,
        id,
        slug,
        **kwargs
    ):
        """Get Secret List Field  # noqa: E501

        Get the items associated to a secret list data field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_list_field(id, slug, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID
            slug (bool, date, datetime, dict, float, int, list, str, none_type): Secret field name

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            CategorizedListItemValueResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['slug'] = \
            slug
        return self.secrets_service_get_list_field_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_list_field_list_definitions(
        self,
        id,
        slug,
        **kwargs
    ):
        """Get Secret List Field List Data  # noqa: E501

        Get the lists associated to a secret list data field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_list_field_list_definitions(id, slug, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID
            slug (bool, date, datetime, dict, float, int, list, str, none_type): The field slug name of the list field. This is the fieldSlugName property of the SecretField object. By default, it is the lower-case field name with all spaces replaced with dashes (-).

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfCategorizedListSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['slug'] = \
            slug
        return self.secrets_service_get_list_field_list_definitions_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_lookup(
        self,
        id,
        **kwargs
    ):
        """Lookup Secret  # noqa: E501

        Look up secret by ID and return secret name and ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_lookup(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID

        Keyword Args:
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretLookup
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_get_lookup_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_restricted(
        self,
        id,
        **kwargs
    ):
        """Get Restricted Secret  # noqa: E501

        Get a restricted secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_restricted(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_restricted_args (SecretRestrictedArgs): Secret options. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_get_restricted_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_secret_audits(
        self,
        id,
        **kwargs
    ):
        """Get Secret Audits by Filter  # noqa: E501

        Get audits for a particular Secret for the given filter.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_secret_audits(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            is_exporting (bool): isExporting. [optional]
            filter_include_password_change_log (bool): Whether or not to include password changes in data. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfSecretAuditModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_get_secret_audits_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_secret_extended_search_details(
        self,
        **kwargs
    ):
        """Secret Search Extended Details  # noqa: E501

        Pass an array of secret IDs, presumably the results of a secret search and get extended details such as has launchers or is favorite.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_secret_extended_search_details(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            secret_search_extended_args (SecretSearchExtendedArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [SecretSearchExtendedSummary]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secrets_service_get_secret_extended_search_details_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_secret_preview(
        self,
        id,
        **kwargs
    ):
        """Get Secret Preview  # noqa: E501

        Get a preview of an unrestricted secret by ID. Restricted secrets will return an AccessDeniedException.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_secret_preview(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DashboardViewSecret
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_get_secret_preview_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_secret_rdp_proxy_info(
        self,
        **kwargs
    ):
        """Get RDP Proxy Information  # noqa: E501

        Get RDP Proxy Information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_secret_rdp_proxy_info(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_proxy_args (SecretProxyArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretRdpProxyModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secrets_service_get_secret_rdp_proxy_info_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_secret_settings(
        self,
        id,
        **kwargs
    ):
        """Get Secret Settings  # noqa: E501

        Get Secret Settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_secret_settings(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailSettingsModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_get_secret_settings_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_secret_ssh_proxy_info(
        self,
        **kwargs
    ):
        """Get SSH Proxy Information  # noqa: E501

        Get SSH Proxy Information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_secret_ssh_proxy_info(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_proxy_args (SecretProxyArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretSshProxyModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secrets_service_get_secret_ssh_proxy_info_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_secret_ssh_terminal_details(
        self,
        **kwargs
    ):
        """Get SSH Terminal Details  # noqa: E501

        Get SSH Terminal Details  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_secret_ssh_terminal_details(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_ssh_terminal_args (SecretSshTerminalArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretSshTerminalModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secrets_service_get_secret_ssh_terminal_details_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_secret_state(
        self,
        id,
        **kwargs
    ):
        """Get Secret State  # noqa: E501

        Retrieve state about a Secret such as whether it requires approval, doublelock, checkout, or other restricted actions to be performed before calling the get the secret.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_secret_state(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailStateViewModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_get_secret_state_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_secret_v2(
        self,
        id,
        **kwargs
    ):
        """Get Secret  # noqa: E501

        Get a single secret by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_secret_v2(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID

        Keyword Args:
            include_inactive (bool): Whether to include inactive secrets in the results. [optional]
            no_auto_checkout (bool): Don't check out the secret if needed. [optional]
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretModelV2
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_get_secret_v2_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_ssh_restricted_commands(
        self,
        id,
        **kwargs
    ):
        """Get SSH Command Restrictions on a Secret  # noqa: E501

        Gets the SSH command restrictions for a Secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_ssh_restricted_commands(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailRestrictedSshCommandViewModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_get_ssh_restricted_commands_endpoint.call_with_http_info(**kwargs)

    def secrets_service_get_summary(
        self,
        id,
        **kwargs
    ):
        """Get Secret Summary  # noqa: E501

        Get the summary for a secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_get_summary(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_get_summary_endpoint.call_with_http_info(**kwargs)

    def secrets_service_put_field(
        self,
        id,
        slug,
        **kwargs
    ):
        """Update Secret Field  # noqa: E501

        Update a secret data field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_put_field(id, slug, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID
            slug (bool, date, datetime, dict, float, int, list, str, none_type): Secret field name

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_item_update_args (SecretItemUpdateArgs): Secret options. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['slug'] = \
            slug
        return self.secrets_service_put_field_endpoint.call_with_http_info(**kwargs)

    def secrets_service_restricted_field(
        self,
        id,
        slug,
        **kwargs
    ):
        """Get Restricted Secret Field  # noqa: E501

        Get a restricted secret data field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_restricted_field(id, slug, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID
            slug (bool, date, datetime, dict, float, int, list, str, none_type): Secret field name

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_restricted_args (SecretRestrictedArgs): Secret options. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['slug'] = \
            slug
        return self.secrets_service_restricted_field_endpoint.call_with_http_info(**kwargs)

    def secrets_service_run_heart_beat(
        self,
        id,
        **kwargs
    ):
        """Run Secret Heartbeat  # noqa: E501

        Check if secret is still valid  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_run_heart_beat(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_run_heart_beat_endpoint.call_with_http_info(**kwargs)

    def secrets_service_search_secret_lookup(
        self,
        **kwargs
    ):
        """Lookup Secrets with Search  # noqa: E501

        Search, filter, sort, and page secrets, returning only secret ID and name  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_search_secret_lookup(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            filter_allow_double_locks (bool): Whether to allow DoubleLocks as part of the search. True by default.. [optional]
            filter_do_not_calculate_total (bool): Whether to return the total number of secrets matching the filters. False by default. If false, the total can be retrieved separately by calling /v1/secrets/search-total with the same arguments used in the search.. [optional]
            filter_double_lock_id (bool, date, datetime, dict, float, int, list, str, none_type): Only include Secrets with this DoubleLock ID assigned in the search results.. [optional]
            filter_extended_fields ([bool, date, datetime, dict, float, int, list, str, none_type]): An array of names of Secret Template fields to return.  Only exposed fields can be returned.. [optional]
            filter_extended_type_id (bool, date, datetime, dict, float, int, list, str, none_type): If not null, return only secrets matching the specified extended mapping type as defined on the secret’s template.. [optional]
            filter_folder_id (bool, date, datetime, dict, float, int, list, str, none_type): If not null, returns only secrets within the specified folder.. [optional]
            filter_heartbeat_status (bool, date, datetime, dict, float, int, list, str, none_type): If not null, returns only secrets with a certain heartbeat status.. [optional]
            filter_include_active (bool): Whether to include active secrets in results (when excluded equals true).. [optional]
            filter_include_inactive (bool): Whether to include inactive secrets in results.. [optional]
            filter_include_restricted (bool): Whether to include restricted secrets in results. Restricted secrets are secrets that are DoubleLocked, require approval, or require a comment to view.. [optional]
            filter_include_sub_folders (bool): Whether to include secrets in subfolders of the specified folder.. [optional]
            filter_is_exact_match (bool): Whether to do an exact match of the search text or a partial match. If an exact match, the entire secret name, field value, or list option in a list field must match the search text.. [optional]
            filter_only_rpc_enabled (bool): Whether to only include secrets whose template has Remote Password Changing enabled.. [optional]
            filter_only_shared_with_me (bool): When true only Secrets where you are not the owner and the Secret was shared explicitly with your user id will be returned.. [optional]
            filter_password_type_ids ([bool, date, datetime, dict, float, int, list, str, none_type]): If not null, returns only secrets matching the specified password types.. [optional]
            filter_permission_required (bool, date, datetime, dict, float, int, list, str, none_type): Specify whether to filter by List, View, Edit, or Owner permission. Default is List.. [optional]
            filter_scope (bool, date, datetime, dict, float, int, list, str, none_type): Specify whether to search All, Recent, or Favorites. [optional]
            filter_search_field (bool, date, datetime, dict, float, int, list, str, none_type): If set, restricts the search to only match secrets where the value of the field specified by name contains the search text.. [optional]
            filter_search_field_slug (bool, date, datetime, dict, float, int, list, str, none_type): If set, restricts the search to only match secrets where the value of the field specified by the slug name contains the search text. This will override SearchField.. [optional]
            filter_search_text (bool, date, datetime, dict, float, int, list, str, none_type): The text to match in the secret name, field value, or list field contents.. [optional]
            filter_secret_template_id (bool, date, datetime, dict, float, int, list, str, none_type): If not null, returns only secrets matching the specified template.. [optional]
            filter_site_id (bool, date, datetime, dict, float, int, list, str, none_type): If not null, returns only secrets within a the specified site.. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfSecretLookup
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secrets_service_search_secret_lookup_endpoint.call_with_http_info(**kwargs)

    def secrets_service_search_total_v2(
        self,
        **kwargs
    ):
        """Get Secret Search Total  # noqa: E501

        Gets the total number of secrets matching the secret search filter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_search_total_v2(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            filter_allow_double_locks (bool): Whether to allow DoubleLocks as part of the search. True by default.. [optional]
            filter_do_not_calculate_total (bool): Whether to return the total number of secrets matching the filters. False by default. If false, the total can be retrieved separately by calling /v1/secrets/search-total with the same arguments used in the search.. [optional]
            filter_double_lock_id (bool, date, datetime, dict, float, int, list, str, none_type): Only include Secrets with this DoubleLock ID assigned in the search results.. [optional]
            filter_extended_fields ([bool, date, datetime, dict, float, int, list, str, none_type]): An array of names of Secret Template fields to return.  Only exposed fields can be returned.. [optional]
            filter_extended_type_id (bool, date, datetime, dict, float, int, list, str, none_type): If not null, return only secrets matching the specified extended mapping type as defined on the secret’s template.. [optional]
            filter_folder_id (bool, date, datetime, dict, float, int, list, str, none_type): If not null, returns only secrets within the specified folder.. [optional]
            filter_has_launcher (bool): Whether to only return secrets with or without launchers. If null, returns secrets regardless of whether they have launchers.. [optional]
            filter_heartbeat_status (bool, date, datetime, dict, float, int, list, str, none_type): If not null, returns only secrets with a certain heartbeat status.. [optional]
            filter_include_active (bool): Whether to include active secrets in results (when excluded equals true).. [optional]
            filter_include_inactive (bool): Whether to include inactive secrets in results.. [optional]
            filter_include_restricted (bool): Whether to include restricted secrets in results. Restricted secrets are secrets that are DoubleLocked, require approval, or require a comment to view.. [optional]
            filter_include_sub_folders (bool): Whether to include secrets in subfolders of the specified folder.. [optional]
            filter_is_exact_match (bool): Whether to do an exact match of the search text or a partial match. If an exact match, the entire secret name, field value, or list option in a list field must match the search text.. [optional]
            filter_only_rpc_enabled (bool): Whether to only include secrets whose template has Remote Password Changing enabled.. [optional]
            filter_only_shared_with_me (bool): When true only Secrets where you are not the owner and the Secret was shared explicitly with your user id will be returned.. [optional]
            filter_password_type_ids ([bool, date, datetime, dict, float, int, list, str, none_type]): If not null, returns only secrets matching the specified password types.. [optional]
            filter_permission_required (bool, date, datetime, dict, float, int, list, str, none_type): Specify whether to filter by List, View, Edit, or Owner permission. Default is List.. [optional]
            filter_scope (bool, date, datetime, dict, float, int, list, str, none_type): Specify whether to search All, Recent, or Favorites. [optional]
            filter_search_field (bool, date, datetime, dict, float, int, list, str, none_type): If set, restricts the search to only match secrets where the value of the field specified by name contains the search text.. [optional]
            filter_search_field_slug (bool, date, datetime, dict, float, int, list, str, none_type): If set, restricts the search to only match secrets where the value of the field specified by the slug name contains the search text. This will override SearchField.. [optional]
            filter_search_text (bool, date, datetime, dict, float, int, list, str, none_type): The text to match in the secret name, field value, or list field contents.. [optional]
            filter_secret_template_ids ([bool, date, datetime, dict, float, int, list, str, none_type]): If not null or empty, returns only secrets matching the specified templates.. [optional]
            filter_site_id (bool, date, datetime, dict, float, int, list, str, none_type): If not null, returns only secrets within a the specified site.. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool, date, datetime, dict, float, int, list, str, none_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secrets_service_search_total_v2_endpoint.call_with_http_info(**kwargs)

    def secrets_service_search_v2(
        self,
        **kwargs
    ):
        """Search Secrets  # noqa: E501

        Search, filter, sort, and page secrets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_search_v2(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            filter_allow_double_locks (bool): Whether to allow DoubleLocks as part of the search. True by default.. [optional]
            filter_do_not_calculate_total (bool): Whether to return the total number of secrets matching the filters. False by default. If false, the total can be retrieved separately by calling /v1/secrets/search-total with the same arguments used in the search.. [optional]
            filter_double_lock_id (bool, date, datetime, dict, float, int, list, str, none_type): Only include Secrets with this DoubleLock ID assigned in the search results.. [optional]
            filter_extended_fields ([bool, date, datetime, dict, float, int, list, str, none_type]): An array of names of Secret Template fields to return.  Only exposed fields can be returned.. [optional]
            filter_extended_type_id (bool, date, datetime, dict, float, int, list, str, none_type): If not null, return only secrets matching the specified extended mapping type as defined on the secret’s template.. [optional]
            filter_folder_id (bool, date, datetime, dict, float, int, list, str, none_type): If not null, returns only secrets within the specified folder.. [optional]
            filter_has_launcher (bool): Whether to only return secrets with or without launchers. If null, returns secrets regardless of whether they have launchers.. [optional]
            filter_heartbeat_status (bool, date, datetime, dict, float, int, list, str, none_type): If not null, returns only secrets with a certain heartbeat status.. [optional]
            filter_include_active (bool): Whether to include active secrets in results (when excluded equals true).. [optional]
            filter_include_inactive (bool): Whether to include inactive secrets in results.. [optional]
            filter_include_restricted (bool): Whether to include restricted secrets in results. Restricted secrets are secrets that are DoubleLocked, require approval, or require a comment to view.. [optional]
            filter_include_sub_folders (bool): Whether to include secrets in subfolders of the specified folder.. [optional]
            filter_is_exact_match (bool): Whether to do an exact match of the search text or a partial match. If an exact match, the entire secret name, field value, or list option in a list field must match the search text.. [optional]
            filter_only_rpc_enabled (bool): Whether to only include secrets whose template has Remote Password Changing enabled.. [optional]
            filter_only_shared_with_me (bool): When true only Secrets where you are not the owner and the Secret was shared explicitly with your user id will be returned.. [optional]
            filter_password_type_ids ([bool, date, datetime, dict, float, int, list, str, none_type]): If not null, returns only secrets matching the specified password types.. [optional]
            filter_permission_required (bool, date, datetime, dict, float, int, list, str, none_type): Specify whether to filter by List, View, Edit, or Owner permission. Default is List.. [optional]
            filter_scope (bool, date, datetime, dict, float, int, list, str, none_type): Specify whether to search All, Recent, or Favorites. [optional]
            filter_search_field (bool, date, datetime, dict, float, int, list, str, none_type): If set, restricts the search to only match secrets where the value of the field specified by name contains the search text.. [optional]
            filter_search_field_slug (bool, date, datetime, dict, float, int, list, str, none_type): If set, restricts the search to only match secrets where the value of the field specified by the slug name contains the search text. This will override SearchField.. [optional]
            filter_search_text (bool, date, datetime, dict, float, int, list, str, none_type): The text to match in the secret name, field value, or list field contents.. [optional]
            filter_secret_template_ids ([bool, date, datetime, dict, float, int, list, str, none_type]): If not null or empty, returns only secrets matching the specified templates.. [optional]
            filter_site_id (bool, date, datetime, dict, float, int, list, str, none_type): If not null, returns only secrets within a the specified site.. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfSecretSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secrets_service_search_v2_endpoint.call_with_http_info(**kwargs)

    def secrets_service_stop_password_change(
        self,
        id,
        **kwargs
    ):
        """Attempt to stop a password change  # noqa: E501

        Attempt to stop a password change  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_stop_password_change(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailStopPasswordResultModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_stop_password_change_endpoint.call_with_http_info(**kwargs)

    def secrets_service_stub(
        self,
        secret_template_id,
        **kwargs
    ):
        """Get Secret Stub  # noqa: E501

        Return the default values for a new secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_stub(secret_template_id, async_req=True)
        >>> result = thread.get()

        Args:
            secret_template_id (bool, date, datetime, dict, float, int, list, str, none_type): Secret template ID

        Keyword Args:
            folder_id (bool, date, datetime, dict, float, int, list, str, none_type): Containing folder ID. May be null unless secrets are required to be in folders.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['secret_template_id'] = \
            secret_template_id
        return self.secrets_service_stub_endpoint.call_with_http_info(**kwargs)

    def secrets_service_undelete_secret(
        self,
        id,
        **kwargs
    ):
        """Undelete a Secret  # noqa: E501

        Undelete a Secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_undelete_secret(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailGeneralModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_undelete_secret_endpoint.call_with_http_info(**kwargs)

    def secrets_service_undelete_secret_v2(
        self,
        id,
        **kwargs
    ):
        """Undelete a Secret  # noqa: E501

        Undelete a Secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_undelete_secret_v2(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailGeneralModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_undelete_secret_v2_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_email(
        self,
        id,
        **kwargs
    ):
        """Update User Secret Email Settings  # noqa: E501

        Update User Secret Email Settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_email(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_detail_update_email_args (SecretDetailUpdateEmailArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailSettingsModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_update_email_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_email_v2(
        self,
        id,
        **kwargs
    ):
        """Update User Secret Email Settings  # noqa: E501

        Update User Secret Email Settings  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_email_v2(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_detail_update_email_args (SecretDetailUpdateEmailArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailSettingsModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_update_email_v2_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_expiration(
        self,
        id,
        **kwargs
    ):
        """Update a Secret expiration  # noqa: E501

        Update a Secret expiration  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_expiration(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_detail_update_expiration_args (SecretDetailUpdateExpirationArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailSettingsModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_update_expiration_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_general(
        self,
        id,
        **kwargs
    ):
        """Update Secret General Information  # noqa: E501

        Update Secret General Information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_general(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_detail_update_general_args (SecretDetailUpdateGeneralArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailGeneralViewModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_update_general_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_general_v2(
        self,
        id,
        **kwargs
    ):
        """Update Secret General Information  # noqa: E501

        Update Secret General Information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_general_v2(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_detail_update_general_args (SecretDetailUpdateGeneralArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailGeneralModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_update_general_v2_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_jumpbox_route_selection(
        self,
        secret_id,
        **kwargs
    ):
        """Update Jumpbox Route Selection  # noqa: E501

        Update Jumpbox Route Selection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_jumpbox_route_selection(secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): secretId

        Keyword Args:
            secret_detail_jumpbox_update_args (SecretDetailJumpboxUpdateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            JumpboxRouteSummaryModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['secret_id'] = \
            secret_id
        return self.secrets_service_update_jumpbox_route_selection_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_list_field_list_definitions(
        self,
        id,
        slug,
        **kwargs
    ):
        """Update Secret List Field List Data  # noqa: E501

        Updates the lists associated to a secret list data field  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_list_field_list_definitions(id, slug, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID
            slug (bool, date, datetime, dict, float, int, list, str, none_type): Secret field name

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_list_field_list_args (SecretListFieldListArgs): Secret options. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfCategorizedListSummary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        kwargs['slug'] = \
            slug
        return self.secrets_service_update_list_field_list_definitions_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_rpc_script_secrets(
        self,
        id,
        **kwargs
    ):
        """Update which Secrets are available for RPC scripts  # noqa: E501

        Update which Secrets are available for RPC scripts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_rpc_script_secrets(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_detail_update_rpc_script_secrets_args (SecretDetailUpdateRpcScriptSecretsArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailRpcModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_update_rpc_script_secrets_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_rpc_script_secrets_v2(
        self,
        id,
        **kwargs
    ):
        """Update which Secrets are available for RPC scripts  # noqa: E501

        Update which Secrets are available for RPC scripts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_rpc_script_secrets_v2(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_detail_update_rpc_script_secrets_args (SecretDetailUpdateRpcScriptSecretsArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailRpcModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_update_rpc_script_secrets_v2_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_secret(
        self,
        id,
        **kwargs
    ):
        """Update Secret  # noqa: E501

        Update a single secret by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_secret(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): Secret ID

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_update_args (SecretUpdateArgs): Secret update options. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_update_secret_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_secret_session(
        self,
        **kwargs
    ):
        """Update Secret Launcher Sessions  # noqa: E501

        Update or Terminate Secret Launcher Sessions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_secret_session(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            secret_launcher_session_args (SecretLauncherSessionArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretLauncherSessionActionResult
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.secrets_service_update_secret_session_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_security(
        self,
        id,
        **kwargs
    ):
        """Update Secret Security General Options  # noqa: E501

        Update Secret Security General Options  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_security(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_detail_update_security_general_args (SecretDetailUpdateSecurityGeneralArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailSecurityViewModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_update_security_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_security_approval_v3(
        self,
        id,
        **kwargs
    ):
        """Update Secret Security Approval Options  # noqa: E501

        Update Secret Security Approval Options  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_security_approval_v3(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_detail_update_security_approval_args (SecretDetailUpdateSecurityApprovalArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretSecurityUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_update_security_approval_v3_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_security_checkout_v3(
        self,
        id,
        **kwargs
    ):
        """Update Secret Security Checkout Options  # noqa: E501

        Update Secret Security Checkout Options  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_security_checkout_v3(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_detail_update_security_checkout_args (SecretDetailUpdateSecurityCheckoutArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretSecurityUpdateResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_update_security_checkout_v3_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_security_v2(
        self,
        id,
        **kwargs
    ):
        """Update Secret Security General Options  # noqa: E501

        Update Secret Security General Options  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_security_v2(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (bool, date, datetime, dict, float, int, list, str, none_type): id

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_path (bool, date, datetime, dict, float, int, list, str, none_type): A full path including folder and secret name can be passed as a query string parameter when the secret ID is set to 0.  This will lookup the secret ID by path.. [optional]
            secret_detail_update_security_general_args (SecretDetailUpdateSecurityGeneralArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            SecretDetailSecurityModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['id'] = \
            id
        return self.secrets_service_update_security_v2_endpoint.call_with_http_info(**kwargs)

    def secrets_service_update_ssh_restricted_commands(
        self,
        secret_id,
        **kwargs
    ):
        """Update Restricted SSH Commands on a Secret  # noqa: E501

        Update the restricted SSH commands configured on a Secret  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.secrets_service_update_ssh_restricted_commands(secret_id, async_req=True)
        >>> result = thread.get()

        Args:
            secret_id (bool, date, datetime, dict, float, int, list, str, none_type): secretId

        Keyword Args:
            auto_check_in (bool): Automatically check in a secret after finding or updating.. [optional]
            auto_checkout (bool): Automatically check out secret before finding or updating.. [optional]
            auto_comment (bool, date, datetime, dict, float, int, list, str, none_type): Leave a comment when checking in or out.. [optional]
            force_check_in (bool): If secret is checked out, then force a check in.. [optional]
            secret_detail_ssh_restricted_command_update_args (SecretDetailSshRestrictedCommandUpdateArgs): args. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['secret_id'] = \
            secret_id
        return self.secrets_service_update_ssh_restricted_commands_endpoint.call_with_http_info(**kwargs)

