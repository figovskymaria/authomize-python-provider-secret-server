"""
    Secret Server Rest API

    REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 11.2.2
    Contact: info@authomize.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from plugins.api_client import ApiClient, Endpoint as _Endpoint
from plugins.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from plugins.model.authentication_failed_response import AuthenticationFailedResponse
from plugins.model.bad_request_response import BadRequestResponse
from plugins.model.disaster_recovery_configuration_args import DisasterRecoveryConfigurationArgs
from plugins.model.disaster_recovery_data_replica_args import DisasterRecoveryDataReplicaArgs
from plugins.model.disaster_recovery_data_replica_message_response import DisasterRecoveryDataReplicaMessageResponse
from plugins.model.disaster_recovery_data_replica_model import DisasterRecoveryDataReplicaModel
from plugins.model.disaster_recovery_data_replica_to_data_source_args import DisasterRecoveryDataReplicaToDataSourceArgs
from plugins.model.disaster_recovery_data_source_to_data_replica_model import DisasterRecoveryDataSourceToDataReplicaModel
from plugins.model.disaster_recovery_handshake_args import DisasterRecoveryHandshakeArgs
from plugins.model.disaster_recovery_handshake_model import DisasterRecoveryHandshakeModel
from plugins.model.disaster_recovery_incoming_configuration_model import DisasterRecoveryIncomingConfigurationModel
from plugins.model.disaster_recovery_outgoing_configuration_model import DisasterRecoveryOutgoingConfigurationModel
from plugins.model.internal_server_error_response import InternalServerErrorResponse
from plugins.model.paging_of_disaster_recovery_audit_view_model import PagingOfDisasterRecoveryAuditViewModel
from plugins.model.paging_of_disaster_recovery_data_replication_log_view_model import PagingOfDisasterRecoveryDataReplicationLogViewModel


class DisasterRecoveryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.disaster_recovery_service_delete_disaster_recovery_data_replica_endpoint = _Endpoint(
            settings={
                'response_type': (bool,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/data-replication/{replicaId}',
                'operation_id': 'disaster_recovery_service_delete_disaster_recovery_data_replica',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'replica_id',
                ],
                'required': [
                    'replica_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'replica_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'replica_id': 'replicaId',
                },
                'location_map': {
                    'replica_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.disaster_recovery_service_get_disaster_recovery_configuration_audits_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfDisasterRecoveryAuditViewModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/audits',
                'operation_id': 'disaster_recovery_service_get_disaster_recovery_configuration_audits',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'audit_type',
                    'is_exporting',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'audit_type':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'is_exporting':
                        (bool,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'audit_type': 'auditType',
                    'is_exporting': 'isExporting',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'audit_type': 'query',
                    'is_exporting': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.disaster_recovery_service_get_disaster_recovery_data_replica_endpoint = _Endpoint(
            settings={
                'response_type': (DisasterRecoveryDataReplicaModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/data-replication/{replicaId}',
                'operation_id': 'disaster_recovery_service_get_disaster_recovery_data_replica',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'replica_id',
                ],
                'required': [
                    'replica_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'replica_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'replica_id': 'replicaId',
                },
                'location_map': {
                    'replica_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.disaster_recovery_service_get_disaster_recovery_data_replication_logs_endpoint = _Endpoint(
            settings={
                'response_type': (PagingOfDisasterRecoveryDataReplicationLogViewModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/logs',
                'operation_id': 'disaster_recovery_service_get_disaster_recovery_data_replication_logs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'log_type',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'log_type':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'log_type': 'logType',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'log_type': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.disaster_recovery_service_get_disaster_recovery_incoming_configuration_endpoint = _Endpoint(
            settings={
                'response_type': (DisasterRecoveryIncomingConfigurationModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/incoming-configuration',
                'operation_id': 'disaster_recovery_service_get_disaster_recovery_incoming_configuration',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.disaster_recovery_service_get_disaster_recovery_outgoing_configuration_endpoint = _Endpoint(
            settings={
                'response_type': (DisasterRecoveryOutgoingConfigurationModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/outgoing-configuration',
                'operation_id': 'disaster_recovery_service_get_disaster_recovery_outgoing_configuration',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'filter_location',
                    'filter_name',
                    'skip',
                    'sort_by_0_direction',
                    'sort_by_0_name',
                    'sort_by_0_priority',
                    'take',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'filter_location':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'filter_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'skip':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_direction':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_name':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'sort_by_0_priority':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'take':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'filter_location': 'filter.location',
                    'filter_name': 'filter.name',
                    'skip': 'skip',
                    'sort_by_0_direction': 'sortBy[0].direction',
                    'sort_by_0_name': 'sortBy[0].name',
                    'sort_by_0_priority': 'sortBy[0].priority',
                    'take': 'take',
                },
                'location_map': {
                    'filter_location': 'query',
                    'filter_name': 'query',
                    'skip': 'query',
                    'sort_by_0_direction': 'query',
                    'sort_by_0_name': 'query',
                    'sort_by_0_priority': 'query',
                    'take': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.disaster_recovery_service_patch_disaster_recovery_data_replica_endpoint = _Endpoint(
            settings={
                'response_type': (DisasterRecoveryDataReplicaModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/data-replication/{replicaId}',
                'operation_id': 'disaster_recovery_service_patch_disaster_recovery_data_replica',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'replica_id',
                    'disaster_recovery_data_replica_args',
                ],
                'required': [
                    'replica_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'replica_id':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                    'disaster_recovery_data_replica_args':
                        (DisasterRecoveryDataReplicaArgs,),
                },
                'attribute_map': {
                    'replica_id': 'replicaId',
                },
                'location_map': {
                    'replica_id': 'path',
                    'disaster_recovery_data_replica_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.disaster_recovery_service_patch_disaster_recovery_incoming_configuration_endpoint = _Endpoint(
            settings={
                'response_type': (DisasterRecoveryIncomingConfigurationModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/incoming-configuration',
                'operation_id': 'disaster_recovery_service_patch_disaster_recovery_incoming_configuration',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'disaster_recovery_configuration_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'disaster_recovery_configuration_args':
                        (DisasterRecoveryConfigurationArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'disaster_recovery_configuration_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.disaster_recovery_service_post_disaster_recovery_handshake_endpoint = _Endpoint(
            settings={
                'response_type': (DisasterRecoveryHandshakeModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/handshake',
                'operation_id': 'disaster_recovery_service_post_disaster_recovery_handshake',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'disaster_recovery_handshake_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'disaster_recovery_handshake_args':
                        (DisasterRecoveryHandshakeArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'disaster_recovery_handshake_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.disaster_recovery_service_request_data_replica_replication_package_endpoint = _Endpoint(
            settings={
                'response_type': (DisasterRecoveryDataSourceToDataReplicaModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/data-replication/package',
                'operation_id': 'disaster_recovery_service_request_data_replica_replication_package',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'disaster_recovery_data_replica_to_data_source_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'disaster_recovery_data_replica_to_data_source_args':
                        (DisasterRecoveryDataReplicaToDataSourceArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'disaster_recovery_data_replica_to_data_source_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.disaster_recovery_service_request_data_replica_replication_start_endpoint = _Endpoint(
            settings={
                'response_type': (DisasterRecoveryDataSourceToDataReplicaModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/data-replication/start',
                'operation_id': 'disaster_recovery_service_request_data_replica_replication_start',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'disaster_recovery_data_replica_to_data_source_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'disaster_recovery_data_replica_to_data_source_args':
                        (DisasterRecoveryDataReplicaToDataSourceArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'disaster_recovery_data_replica_to_data_source_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.disaster_recovery_service_request_data_replica_replication_status_endpoint = _Endpoint(
            settings={
                'response_type': (DisasterRecoveryDataSourceToDataReplicaModel,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/data-replication/status',
                'operation_id': 'disaster_recovery_service_request_data_replica_replication_status',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'disaster_recovery_data_replica_to_data_source_args',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'disaster_recovery_data_replica_to_data_source_args':
                        (DisasterRecoveryDataReplicaToDataSourceArgs,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'disaster_recovery_data_replica_to_data_source_args': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.disaster_recovery_service_run_disaster_recovery_data_replica_test_now_endpoint = _Endpoint(
            settings={
                'response_type': (DisasterRecoveryDataReplicaMessageResponse,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/data-replication/test',
                'operation_id': 'disaster_recovery_service_run_disaster_recovery_data_replica_test_now',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                },
                'attribute_map': {
                },
                'location_map': {
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.disaster_recovery_service_run_disaster_recovery_data_replication_now_endpoint = _Endpoint(
            settings={
                'response_type': (DisasterRecoveryDataReplicaMessageResponse,),
                'auth': [
                    'BearerToken'
                ],
                'endpoint_path': '/v1/disaster-recovery/data-replication/run-now',
                'operation_id': 'disaster_recovery_service_run_disaster_recovery_data_replication_now',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'minutes',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'minutes':
                        (bool, date, datetime, dict, float, int, list, str, none_type,),
                },
                'attribute_map': {
                    'minutes': 'minutes',
                },
                'location_map': {
                    'minutes': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def disaster_recovery_service_delete_disaster_recovery_data_replica(
        self,
        replica_id,
        **kwargs
    ):
        """Delete Disaster Recovery Data Replica  # noqa: E501

        Delete the data replica.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_delete_disaster_recovery_data_replica(replica_id, async_req=True)
        >>> result = thread.get()

        Args:
            replica_id (bool, date, datetime, dict, float, int, list, str, none_type): replicaId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            bool
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['replica_id'] = \
            replica_id
        return self.disaster_recovery_service_delete_disaster_recovery_data_replica_endpoint.call_with_http_info(**kwargs)

    def disaster_recovery_service_get_disaster_recovery_configuration_audits(
        self,
        **kwargs
    ):
        """Get Disaster Recovery Configuration Audits  # noqa: E501

        Retrieve the audits for the Disaster Recovery configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_get_disaster_recovery_configuration_audits(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            audit_type (bool, date, datetime, dict, float, int, list, str, none_type): auditType. [optional]
            is_exporting (bool): isExporting. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfDisasterRecoveryAuditViewModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.disaster_recovery_service_get_disaster_recovery_configuration_audits_endpoint.call_with_http_info(**kwargs)

    def disaster_recovery_service_get_disaster_recovery_data_replica(
        self,
        replica_id,
        **kwargs
    ):
        """Get Disaster Recovery Data Replica  # noqa: E501

        Retrieve the settings and descriptions for the Disaster Recovery data replica view model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_get_disaster_recovery_data_replica(replica_id, async_req=True)
        >>> result = thread.get()

        Args:
            replica_id (bool, date, datetime, dict, float, int, list, str, none_type): replicaId

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DisasterRecoveryDataReplicaModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['replica_id'] = \
            replica_id
        return self.disaster_recovery_service_get_disaster_recovery_data_replica_endpoint.call_with_http_info(**kwargs)

    def disaster_recovery_service_get_disaster_recovery_data_replication_logs(
        self,
        **kwargs
    ):
        """Get Disaster Recovery Replication Logs  # noqa: E501

        Retrieve the logs for each run of Disaster Recovery Replication  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_get_disaster_recovery_data_replication_logs(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            log_type (bool, date, datetime, dict, float, int, list, str, none_type): logType. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PagingOfDisasterRecoveryDataReplicationLogViewModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.disaster_recovery_service_get_disaster_recovery_data_replication_logs_endpoint.call_with_http_info(**kwargs)

    def disaster_recovery_service_get_disaster_recovery_incoming_configuration(
        self,
        **kwargs
    ):
        """Get Disaster Recovery Incoming Configuration  # noqa: E501

        Retrieve the settings and descriptions for the Disaster Recovery incoming configuration view model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_get_disaster_recovery_incoming_configuration(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DisasterRecoveryIncomingConfigurationModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.disaster_recovery_service_get_disaster_recovery_incoming_configuration_endpoint.call_with_http_info(**kwargs)

    def disaster_recovery_service_get_disaster_recovery_outgoing_configuration(
        self,
        **kwargs
    ):
        """Get Disaster Recovery Outgoing Configuration  # noqa: E501

        Retrieve the settings and descriptions for the Disaster Recovery Outgoing Configuration view model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_get_disaster_recovery_outgoing_configuration(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            filter_location (bool, date, datetime, dict, float, int, list, str, none_type): Only return data replicas with locations containing this text.. [optional]
            filter_name (bool, date, datetime, dict, float, int, list, str, none_type): Only return data replicas with names containing this text.. [optional]
            skip (bool, date, datetime, dict, float, int, list, str, none_type): Number of records to skip before taking results. [optional]
            sort_by_0_direction (bool, date, datetime, dict, float, int, list, str, none_type): Sort direction. [optional]
            sort_by_0_name (bool, date, datetime, dict, float, int, list, str, none_type): Sort field name. [optional]
            sort_by_0_priority (bool, date, datetime, dict, float, int, list, str, none_type): Priority index. Sorts with lower values are executed earlier. [optional]
            take (bool, date, datetime, dict, float, int, list, str, none_type): Maximum number of records to include in results. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DisasterRecoveryOutgoingConfigurationModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.disaster_recovery_service_get_disaster_recovery_outgoing_configuration_endpoint.call_with_http_info(**kwargs)

    def disaster_recovery_service_patch_disaster_recovery_data_replica(
        self,
        replica_id,
        **kwargs
    ):
        """Patch Disaster Recovery Data Replica  # noqa: E501

        Patch Disaster Recovery Data Replica by sending one or more fields with dirty set to true.  This will return the actual updated view model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_patch_disaster_recovery_data_replica(replica_id, async_req=True)
        >>> result = thread.get()

        Args:
            replica_id (bool, date, datetime, dict, float, int, list, str, none_type): replicaId

        Keyword Args:
            disaster_recovery_data_replica_args (DisasterRecoveryDataReplicaArgs): Disaster Recovery Data Replica Update Settings. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DisasterRecoveryDataReplicaModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['replica_id'] = \
            replica_id
        return self.disaster_recovery_service_patch_disaster_recovery_data_replica_endpoint.call_with_http_info(**kwargs)

    def disaster_recovery_service_patch_disaster_recovery_incoming_configuration(
        self,
        **kwargs
    ):
        """Patch Disaster Recovery Incoming Configuration  # noqa: E501

        Patch Disaster Recovery Incoming Configuration by sending one or more fields with dirty set to true.  This will return the actual updated view model.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_patch_disaster_recovery_incoming_configuration(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            disaster_recovery_configuration_args (DisasterRecoveryConfigurationArgs): Disaster Recovery Incoming Configuration Update Settings. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DisasterRecoveryIncomingConfigurationModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.disaster_recovery_service_patch_disaster_recovery_incoming_configuration_endpoint.call_with_http_info(**kwargs)

    def disaster_recovery_service_post_disaster_recovery_handshake(
        self,
        **kwargs
    ):
        """Disaster Recovery Handshake  # noqa: E501

        Try to add the requesting data replica to the receiving data source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_post_disaster_recovery_handshake(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            disaster_recovery_handshake_args (DisasterRecoveryHandshakeArgs): Disaster Recovery Handshake arguments encrypted using the data source's public key.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DisasterRecoveryHandshakeModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.disaster_recovery_service_post_disaster_recovery_handshake_endpoint.call_with_http_info(**kwargs)

    def disaster_recovery_service_request_data_replica_replication_package(
        self,
        **kwargs
    ):
        """Request Disaster Recovery Data Replica Replication Package  # noqa: E501

        Request a data replication package for this replica from the Data Source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_request_data_replica_replication_package(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            disaster_recovery_data_replica_to_data_source_args (DisasterRecoveryDataReplicaToDataSourceArgs): Disaster Recovery Data Replica to Data Source request encrypted using the symmetric key from the data replica.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DisasterRecoveryDataSourceToDataReplicaModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.disaster_recovery_service_request_data_replica_replication_package_endpoint.call_with_http_info(**kwargs)

    def disaster_recovery_service_request_data_replica_replication_start(
        self,
        **kwargs
    ):
        """Request Disaster Recovery Data Replica Replication Start  # noqa: E501

        Request that data replication be started for the given replica.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_request_data_replica_replication_start(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            disaster_recovery_data_replica_to_data_source_args (DisasterRecoveryDataReplicaToDataSourceArgs): Disaster Recovery Data Replica to Data Source request encrypted using the symmetric key from the data replica.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DisasterRecoveryDataSourceToDataReplicaModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.disaster_recovery_service_request_data_replica_replication_start_endpoint.call_with_http_info(**kwargs)

    def disaster_recovery_service_request_data_replica_replication_status(
        self,
        **kwargs
    ):
        """Request Disaster Recovery Data Replica Replication Status  # noqa: E501

        Request the data replication status for this replica from the Data Source.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_request_data_replica_replication_status(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            disaster_recovery_data_replica_to_data_source_args (DisasterRecoveryDataReplicaToDataSourceArgs): Disaster Recovery Data Replica to Data Source request encrypted using the symmetric key from the data replica.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DisasterRecoveryDataSourceToDataReplicaModel
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.disaster_recovery_service_request_data_replica_replication_status_endpoint.call_with_http_info(**kwargs)

    def disaster_recovery_service_run_disaster_recovery_data_replica_test_now(
        self,
        **kwargs
    ):
        """Test Disaster Recovery Data Replication  # noqa: E501

        Test Disaster Recovery data replication as configured.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_run_disaster_recovery_data_replica_test_now(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DisasterRecoveryDataReplicaMessageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.disaster_recovery_service_run_disaster_recovery_data_replica_test_now_endpoint.call_with_http_info(**kwargs)

    def disaster_recovery_service_run_disaster_recovery_data_replication_now(
        self,
        **kwargs
    ):
        """Start Disaster Recovery Data Replication  # noqa: E501

        Start Disaster Recovery data replication as configured.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.disaster_recovery_service_run_disaster_recovery_data_replication_now(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            minutes (bool, date, datetime, dict, float, int, list, str, none_type): minutes. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            DisasterRecoveryDataReplicaMessageResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.disaster_recovery_service_run_disaster_recovery_data_replication_now_endpoint.call_with_http_info(**kwargs)

