"""
    Secret Server Rest API

    REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 11.2.2
    Contact: info@authomize.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from plugins.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from plugins.exceptions import ApiAttributeError


def lazy_import():
    from plugins.model.external_user_source_types import ExternalUserSourceTypes
    from plugins.model.platform_integration_type import PlatformIntegrationType
    from plugins.model.unix_authentication_method_type import UnixAuthenticationMethodType
    from plugins.model.user_ip_address_restriction_model import UserIpAddressRestrictionModel
    globals()['ExternalUserSourceTypes'] = ExternalUserSourceTypes
    globals()['PlatformIntegrationType'] = PlatformIntegrationType
    globals()['UnixAuthenticationMethodType'] = UnixAuthenticationMethodType
    globals()['UserIpAddressRestrictionModel'] = UserIpAddressRestrictionModel


class UserModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'ad_account_expires': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'ad_guid': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'created': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'date_option_id': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'display_name': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'domain_id': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'duo_two_factor': (bool,),  # noqa: E501
            'email_address': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'enabled': (bool,),  # noqa: E501
            'external_user_source': (ExternalUserSourceTypes,),  # noqa: E501
            'fido2_two_factor': (bool,),  # noqa: E501
            'id': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'ip_address_restrictions': ([UserIpAddressRestrictionModel],),  # noqa: E501
            'is_application_account': (bool,),  # noqa: E501
            'is_email_copied_from_ad': (bool,),  # noqa: E501
            'is_email_verified': (bool,),  # noqa: E501
            'is_locked_out': (bool,),  # noqa: E501
            'last_login': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'last_session_activity': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'lock_out_reason': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'lock_out_reason_description': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'login_failures': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'must_verify_email': (bool,),  # noqa: E501
            'oath_two_factor': (bool,),  # noqa: E501
            'oath_verified': (bool,),  # noqa: E501
            'password_last_changed': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'personal_group_id': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'platform_integration_type': (PlatformIntegrationType,),  # noqa: E501
            'radius_two_factor': (bool,),  # noqa: E501
            'radius_user_name': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'reset_session_started': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'slack_id': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'time_option_id': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'two_factor': (bool,),  # noqa: E501
            'unix_authentication_method': (UnixAuthenticationMethodType,),  # noqa: E501
            'user_lcid': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'user_name': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'verify_email_sent_date': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'ad_account_expires': 'adAccountExpires',  # noqa: E501
        'ad_guid': 'adGuid',  # noqa: E501
        'created': 'created',  # noqa: E501
        'date_option_id': 'dateOptionId',  # noqa: E501
        'display_name': 'displayName',  # noqa: E501
        'domain_id': 'domainId',  # noqa: E501
        'duo_two_factor': 'duoTwoFactor',  # noqa: E501
        'email_address': 'emailAddress',  # noqa: E501
        'enabled': 'enabled',  # noqa: E501
        'external_user_source': 'externalUserSource',  # noqa: E501
        'fido2_two_factor': 'fido2TwoFactor',  # noqa: E501
        'id': 'id',  # noqa: E501
        'ip_address_restrictions': 'ipAddressRestrictions',  # noqa: E501
        'is_application_account': 'isApplicationAccount',  # noqa: E501
        'is_email_copied_from_ad': 'isEmailCopiedFromAD',  # noqa: E501
        'is_email_verified': 'isEmailVerified',  # noqa: E501
        'is_locked_out': 'isLockedOut',  # noqa: E501
        'last_login': 'lastLogin',  # noqa: E501
        'last_session_activity': 'lastSessionActivity',  # noqa: E501
        'lock_out_reason': 'lockOutReason',  # noqa: E501
        'lock_out_reason_description': 'lockOutReasonDescription',  # noqa: E501
        'login_failures': 'loginFailures',  # noqa: E501
        'must_verify_email': 'mustVerifyEmail',  # noqa: E501
        'oath_two_factor': 'oathTwoFactor',  # noqa: E501
        'oath_verified': 'oathVerified',  # noqa: E501
        'password_last_changed': 'passwordLastChanged',  # noqa: E501
        'personal_group_id': 'personalGroupId',  # noqa: E501
        'platform_integration_type': 'platformIntegrationType',  # noqa: E501
        'radius_two_factor': 'radiusTwoFactor',  # noqa: E501
        'radius_user_name': 'radiusUserName',  # noqa: E501
        'reset_session_started': 'resetSessionStarted',  # noqa: E501
        'slack_id': 'slackId',  # noqa: E501
        'time_option_id': 'timeOptionId',  # noqa: E501
        'two_factor': 'twoFactor',  # noqa: E501
        'unix_authentication_method': 'unixAuthenticationMethod',  # noqa: E501
        'user_lcid': 'userLcid',  # noqa: E501
        'user_name': 'userName',  # noqa: E501
        'verify_email_sent_date': 'verifyEmailSentDate',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """UserModel - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            ad_account_expires (bool, date, datetime, dict, float, int, list, str, none_type): Active Directory account expiration time. [optional]  # noqa: E501
            ad_guid (bool, date, datetime, dict, float, int, list, str, none_type): Active Directory unique identifier. [optional]  # noqa: E501
            created (bool, date, datetime, dict, float, int, list, str, none_type): User creation time. [optional]  # noqa: E501
            date_option_id (bool, date, datetime, dict, float, int, list, str, none_type): DateOptionId. [optional]  # noqa: E501
            display_name (bool, date, datetime, dict, float, int, list, str, none_type): Display name. [optional]  # noqa: E501
            domain_id (bool, date, datetime, dict, float, int, list, str, none_type): Active Directory domain ID. [optional]  # noqa: E501
            duo_two_factor (bool): Whether Duo two-factor authentication is enabled. [optional]  # noqa: E501
            email_address (bool, date, datetime, dict, float, int, list, str, none_type): Email address. [optional]  # noqa: E501
            enabled (bool): Whether the user account is enabled. [optional]  # noqa: E501
            external_user_source (ExternalUserSourceTypes): [optional]  # noqa: E501
            fido2_two_factor (bool): Whether FIDO2 two-factor authentication is enabled. [optional]  # noqa: E501
            id (bool, date, datetime, dict, float, int, list, str, none_type): User ID. [optional]  # noqa: E501
            ip_address_restrictions ([UserIpAddressRestrictionModel]): Array of IP Address Restrictions for the user.. [optional]  # noqa: E501
            is_application_account (bool): IsApplicationAccount. [optional]  # noqa: E501
            is_email_copied_from_ad (bool): Whether the email address is derived from the Active Directory account. [optional]  # noqa: E501
            is_email_verified (bool): Whether the email address has been verified. [optional]  # noqa: E501
            is_locked_out (bool): Whether the user is locked out. [optional]  # noqa: E501
            last_login (bool, date, datetime, dict, float, int, list, str, none_type): Time of last login. [optional]  # noqa: E501
            last_session_activity (bool, date, datetime, dict, float, int, list, str, none_type): Time of last session activity. [optional]  # noqa: E501
            lock_out_reason (bool, date, datetime, dict, float, int, list, str, none_type): The reason for the lock out. [optional]  # noqa: E501
            lock_out_reason_description (bool, date, datetime, dict, float, int, list, str, none_type): An optional description of the reason for the lock out. [optional]  # noqa: E501
            login_failures (bool, date, datetime, dict, float, int, list, str, none_type): Number of login failures. [optional]  # noqa: E501
            must_verify_email (bool): Whether the user must verify their email address. [optional]  # noqa: E501
            oath_two_factor (bool): Whether OATH two-factor authentication is enabled. [optional]  # noqa: E501
            oath_verified (bool): Whether OATH has been verified. [optional]  # noqa: E501
            password_last_changed (bool, date, datetime, dict, float, int, list, str, none_type): Time when the password was last changed. [optional]  # noqa: E501
            personal_group_id (bool, date, datetime, dict, float, int, list, str, none_type): The personal group ID for this user.  Each user has a personal group that is a group that only contains that user.. [optional]  # noqa: E501
            platform_integration_type (PlatformIntegrationType): [optional]  # noqa: E501
            radius_two_factor (bool): Whether RADIUS two-factor authentication is enabled. [optional]  # noqa: E501
            radius_user_name (bool, date, datetime, dict, float, int, list, str, none_type): RADIUS username. [optional]  # noqa: E501
            reset_session_started (bool, date, datetime, dict, float, int, list, str, none_type): ResetSessionStarted. [optional]  # noqa: E501
            slack_id (bool, date, datetime, dict, float, int, list, str, none_type): Slack ID of the user. [optional]  # noqa: E501
            time_option_id (bool, date, datetime, dict, float, int, list, str, none_type): TimeOptionId. [optional]  # noqa: E501
            two_factor (bool): Whether two-factor authentication is enabled. [optional]  # noqa: E501
            unix_authentication_method (UnixAuthenticationMethodType): [optional]  # noqa: E501
            user_lcid (bool, date, datetime, dict, float, int, list, str, none_type): UserLcid. [optional]  # noqa: E501
            user_name (bool, date, datetime, dict, float, int, list, str, none_type): User name. [optional]  # noqa: E501
            verify_email_sent_date (bool, date, datetime, dict, float, int, list, str, none_type): Time when the verification email was sent. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """UserModel - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            ad_account_expires (bool, date, datetime, dict, float, int, list, str, none_type): Active Directory account expiration time. [optional]  # noqa: E501
            ad_guid (bool, date, datetime, dict, float, int, list, str, none_type): Active Directory unique identifier. [optional]  # noqa: E501
            created (bool, date, datetime, dict, float, int, list, str, none_type): User creation time. [optional]  # noqa: E501
            date_option_id (bool, date, datetime, dict, float, int, list, str, none_type): DateOptionId. [optional]  # noqa: E501
            display_name (bool, date, datetime, dict, float, int, list, str, none_type): Display name. [optional]  # noqa: E501
            domain_id (bool, date, datetime, dict, float, int, list, str, none_type): Active Directory domain ID. [optional]  # noqa: E501
            duo_two_factor (bool): Whether Duo two-factor authentication is enabled. [optional]  # noqa: E501
            email_address (bool, date, datetime, dict, float, int, list, str, none_type): Email address. [optional]  # noqa: E501
            enabled (bool): Whether the user account is enabled. [optional]  # noqa: E501
            external_user_source (ExternalUserSourceTypes): [optional]  # noqa: E501
            fido2_two_factor (bool): Whether FIDO2 two-factor authentication is enabled. [optional]  # noqa: E501
            id (bool, date, datetime, dict, float, int, list, str, none_type): User ID. [optional]  # noqa: E501
            ip_address_restrictions ([UserIpAddressRestrictionModel]): Array of IP Address Restrictions for the user.. [optional]  # noqa: E501
            is_application_account (bool): IsApplicationAccount. [optional]  # noqa: E501
            is_email_copied_from_ad (bool): Whether the email address is derived from the Active Directory account. [optional]  # noqa: E501
            is_email_verified (bool): Whether the email address has been verified. [optional]  # noqa: E501
            is_locked_out (bool): Whether the user is locked out. [optional]  # noqa: E501
            last_login (bool, date, datetime, dict, float, int, list, str, none_type): Time of last login. [optional]  # noqa: E501
            last_session_activity (bool, date, datetime, dict, float, int, list, str, none_type): Time of last session activity. [optional]  # noqa: E501
            lock_out_reason (bool, date, datetime, dict, float, int, list, str, none_type): The reason for the lock out. [optional]  # noqa: E501
            lock_out_reason_description (bool, date, datetime, dict, float, int, list, str, none_type): An optional description of the reason for the lock out. [optional]  # noqa: E501
            login_failures (bool, date, datetime, dict, float, int, list, str, none_type): Number of login failures. [optional]  # noqa: E501
            must_verify_email (bool): Whether the user must verify their email address. [optional]  # noqa: E501
            oath_two_factor (bool): Whether OATH two-factor authentication is enabled. [optional]  # noqa: E501
            oath_verified (bool): Whether OATH has been verified. [optional]  # noqa: E501
            password_last_changed (bool, date, datetime, dict, float, int, list, str, none_type): Time when the password was last changed. [optional]  # noqa: E501
            personal_group_id (bool, date, datetime, dict, float, int, list, str, none_type): The personal group ID for this user.  Each user has a personal group that is a group that only contains that user.. [optional]  # noqa: E501
            platform_integration_type (PlatformIntegrationType): [optional]  # noqa: E501
            radius_two_factor (bool): Whether RADIUS two-factor authentication is enabled. [optional]  # noqa: E501
            radius_user_name (bool, date, datetime, dict, float, int, list, str, none_type): RADIUS username. [optional]  # noqa: E501
            reset_session_started (bool, date, datetime, dict, float, int, list, str, none_type): ResetSessionStarted. [optional]  # noqa: E501
            slack_id (bool, date, datetime, dict, float, int, list, str, none_type): Slack ID of the user. [optional]  # noqa: E501
            time_option_id (bool, date, datetime, dict, float, int, list, str, none_type): TimeOptionId. [optional]  # noqa: E501
            two_factor (bool): Whether two-factor authentication is enabled. [optional]  # noqa: E501
            unix_authentication_method (UnixAuthenticationMethodType): [optional]  # noqa: E501
            user_lcid (bool, date, datetime, dict, float, int, list, str, none_type): UserLcid. [optional]  # noqa: E501
            user_name (bool, date, datetime, dict, float, int, list, str, none_type): User name. [optional]  # noqa: E501
            verify_email_sent_date (bool, date, datetime, dict, float, int, list, str, none_type): Time when the verification email was sent. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
