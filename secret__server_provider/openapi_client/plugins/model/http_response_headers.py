"""
    Secret Server Rest API

    REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 11.2.2
    Contact: info@authomize.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from plugins.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from plugins.exceptions import ApiAttributeError


def lazy_import():
    from plugins.model.authentication_header_value import AuthenticationHeaderValue
    from plugins.model.cache_control_header_value import CacheControlHeaderValue
    from plugins.model.entity_tag_header_value import EntityTagHeaderValue
    from plugins.model.name_value_header_value import NameValueHeaderValue
    from plugins.model.optional_date_time_offset import OptionalDateTimeOffset
    from plugins.model.product_header_value import ProductHeaderValue
    from plugins.model.product_info_header_value import ProductInfoHeaderValue
    from plugins.model.retry_condition_header_value import RetryConditionHeaderValue
    from plugins.model.transfer_coding_header_value import TransferCodingHeaderValue
    from plugins.model.uri import Uri
    from plugins.model.via_header_value import ViaHeaderValue
    from plugins.model.warning_header_value import WarningHeaderValue
    globals()['AuthenticationHeaderValue'] = AuthenticationHeaderValue
    globals()['CacheControlHeaderValue'] = CacheControlHeaderValue
    globals()['EntityTagHeaderValue'] = EntityTagHeaderValue
    globals()['NameValueHeaderValue'] = NameValueHeaderValue
    globals()['OptionalDateTimeOffset'] = OptionalDateTimeOffset
    globals()['ProductHeaderValue'] = ProductHeaderValue
    globals()['ProductInfoHeaderValue'] = ProductInfoHeaderValue
    globals()['RetryConditionHeaderValue'] = RetryConditionHeaderValue
    globals()['TransferCodingHeaderValue'] = TransferCodingHeaderValue
    globals()['Uri'] = Uri
    globals()['ViaHeaderValue'] = ViaHeaderValue
    globals()['WarningHeaderValue'] = WarningHeaderValue


class HttpResponseHeaders(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'accept_ranges': ([bool, date, datetime, dict, float, int, list, str, none_type],),  # noqa: E501
            'age': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'cache_control': (CacheControlHeaderValue,),  # noqa: E501
            'connection': ([bool, date, datetime, dict, float, int, list, str, none_type],),  # noqa: E501
            'connection_close': (bool,),  # noqa: E501
            'date': (OptionalDateTimeOffset,),  # noqa: E501
            'e_tag': (EntityTagHeaderValue,),  # noqa: E501
            'location': (Uri,),  # noqa: E501
            'pragma': ([NameValueHeaderValue],),  # noqa: E501
            'proxy_authenticate': ([AuthenticationHeaderValue],),  # noqa: E501
            'retry_after': (RetryConditionHeaderValue,),  # noqa: E501
            'server': ([ProductInfoHeaderValue],),  # noqa: E501
            'trailer': ([bool, date, datetime, dict, float, int, list, str, none_type],),  # noqa: E501
            'transfer_encoding': ([TransferCodingHeaderValue],),  # noqa: E501
            'transfer_encoding_chunked': (bool,),  # noqa: E501
            'upgrade': ([ProductHeaderValue],),  # noqa: E501
            'vary': ([bool, date, datetime, dict, float, int, list, str, none_type],),  # noqa: E501
            'via': ([ViaHeaderValue],),  # noqa: E501
            'warning': ([WarningHeaderValue],),  # noqa: E501
            'www_authenticate': ([AuthenticationHeaderValue],),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'accept_ranges': 'acceptRanges',  # noqa: E501
        'age': 'age',  # noqa: E501
        'cache_control': 'cacheControl',  # noqa: E501
        'connection': 'connection',  # noqa: E501
        'connection_close': 'connectionClose',  # noqa: E501
        'date': 'date',  # noqa: E501
        'e_tag': 'eTag',  # noqa: E501
        'location': 'location',  # noqa: E501
        'pragma': 'pragma',  # noqa: E501
        'proxy_authenticate': 'proxyAuthenticate',  # noqa: E501
        'retry_after': 'retryAfter',  # noqa: E501
        'server': 'server',  # noqa: E501
        'trailer': 'trailer',  # noqa: E501
        'transfer_encoding': 'transferEncoding',  # noqa: E501
        'transfer_encoding_chunked': 'transferEncodingChunked',  # noqa: E501
        'upgrade': 'upgrade',  # noqa: E501
        'vary': 'vary',  # noqa: E501
        'via': 'via',  # noqa: E501
        'warning': 'warning',  # noqa: E501
        'www_authenticate': 'wwwAuthenticate',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """HttpResponseHeaders - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            accept_ranges ([bool, date, datetime, dict, float, int, list, str, none_type]): AcceptRanges. [optional]  # noqa: E501
            age (bool, date, datetime, dict, float, int, list, str, none_type): Age. [optional]  # noqa: E501
            cache_control (CacheControlHeaderValue): [optional]  # noqa: E501
            connection ([bool, date, datetime, dict, float, int, list, str, none_type]): Connection. [optional]  # noqa: E501
            connection_close (bool): ConnectionClose. [optional]  # noqa: E501
            date (OptionalDateTimeOffset): [optional]  # noqa: E501
            e_tag (EntityTagHeaderValue): [optional]  # noqa: E501
            location (Uri): [optional]  # noqa: E501
            pragma ([NameValueHeaderValue]): Pragma. [optional]  # noqa: E501
            proxy_authenticate ([AuthenticationHeaderValue]): ProxyAuthenticate. [optional]  # noqa: E501
            retry_after (RetryConditionHeaderValue): [optional]  # noqa: E501
            server ([ProductInfoHeaderValue]): Server. [optional]  # noqa: E501
            trailer ([bool, date, datetime, dict, float, int, list, str, none_type]): Trailer. [optional]  # noqa: E501
            transfer_encoding ([TransferCodingHeaderValue]): TransferEncoding. [optional]  # noqa: E501
            transfer_encoding_chunked (bool): TransferEncodingChunked. [optional]  # noqa: E501
            upgrade ([ProductHeaderValue]): Upgrade. [optional]  # noqa: E501
            vary ([bool, date, datetime, dict, float, int, list, str, none_type]): Vary. [optional]  # noqa: E501
            via ([ViaHeaderValue]): Via. [optional]  # noqa: E501
            warning ([WarningHeaderValue]): Warning. [optional]  # noqa: E501
            www_authenticate ([AuthenticationHeaderValue]): WwwAuthenticate. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """HttpResponseHeaders - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            accept_ranges ([bool, date, datetime, dict, float, int, list, str, none_type]): AcceptRanges. [optional]  # noqa: E501
            age (bool, date, datetime, dict, float, int, list, str, none_type): Age. [optional]  # noqa: E501
            cache_control (CacheControlHeaderValue): [optional]  # noqa: E501
            connection ([bool, date, datetime, dict, float, int, list, str, none_type]): Connection. [optional]  # noqa: E501
            connection_close (bool): ConnectionClose. [optional]  # noqa: E501
            date (OptionalDateTimeOffset): [optional]  # noqa: E501
            e_tag (EntityTagHeaderValue): [optional]  # noqa: E501
            location (Uri): [optional]  # noqa: E501
            pragma ([NameValueHeaderValue]): Pragma. [optional]  # noqa: E501
            proxy_authenticate ([AuthenticationHeaderValue]): ProxyAuthenticate. [optional]  # noqa: E501
            retry_after (RetryConditionHeaderValue): [optional]  # noqa: E501
            server ([ProductInfoHeaderValue]): Server. [optional]  # noqa: E501
            trailer ([bool, date, datetime, dict, float, int, list, str, none_type]): Trailer. [optional]  # noqa: E501
            transfer_encoding ([TransferCodingHeaderValue]): TransferEncoding. [optional]  # noqa: E501
            transfer_encoding_chunked (bool): TransferEncodingChunked. [optional]  # noqa: E501
            upgrade ([ProductHeaderValue]): Upgrade. [optional]  # noqa: E501
            vary ([bool, date, datetime, dict, float, int, list, str, none_type]): Vary. [optional]  # noqa: E501
            via ([ViaHeaderValue]): Via. [optional]  # noqa: E501
            warning ([WarningHeaderValue]): Warning. [optional]  # noqa: E501
            www_authenticate ([AuthenticationHeaderValue]): WwwAuthenticate. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
