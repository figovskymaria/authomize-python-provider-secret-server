"""
    Secret Server Rest API

    REST API documentation for Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    The version of the OpenAPI document: 11.2.2
    Contact: info@authomize.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from plugins.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from plugins.exceptions import ApiAttributeError



class ConfigurationSamlIdentityProviderModel(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'active': (bool,),  # noqa: E501
            'authn_context': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'clock_skew': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'description': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'disable_assertion_replay_check': (bool,),  # noqa: E501
            'disable_audience_restriction_check': (bool,),  # noqa: E501
            'disable_authn_context_check': (bool,),  # noqa: E501
            'disable_destination_check': (bool,),  # noqa: E501
            'disable_inbound_logout': (bool,),  # noqa: E501
            'disable_in_response_to_check': (bool,),  # noqa: E501
            'disable_pending_logout_check': (bool,),  # noqa: E501
            'disable_recipient_check': (bool,),  # noqa: E501
            'disable_time_period_check': (bool,),  # noqa: E501
            'display_name': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'domain_attribute': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'enable_detailed_log': (bool,),  # noqa: E501
            'enable_slo': (bool,),  # noqa: E501
            'force_authentication': (bool,),  # noqa: E501
            'identity_provider_id': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'logout_request_life_time': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'name': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'override_pending_authn_request': (bool,),  # noqa: E501
            'public_certificate': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'sign_authn_request': (bool,),  # noqa: E501
            'sign_logout_request': (bool,),  # noqa: E501
            'sign_logout_response': (bool,),  # noqa: E501
            'single_logout_service_response_url': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'single_logout_service_url': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'sso_service_binding': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'sso_service_url': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'username_attribute': (bool, date, datetime, dict, float, int, list, str, none_type,),  # noqa: E501
            'want_assertion_encrypted': (bool,),  # noqa: E501
            'want_assertion_or_response_signed': (bool,),  # noqa: E501
            'want_assertion_signed': (bool,),  # noqa: E501
            'want_logout_request_signed': (bool,),  # noqa: E501
            'want_logout_response_signed': (bool,),  # noqa: E501
            'want_saml_response_signed': (bool,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'active': 'active',  # noqa: E501
        'authn_context': 'authnContext',  # noqa: E501
        'clock_skew': 'clockSkew',  # noqa: E501
        'description': 'description',  # noqa: E501
        'disable_assertion_replay_check': 'disableAssertionReplayCheck',  # noqa: E501
        'disable_audience_restriction_check': 'disableAudienceRestrictionCheck',  # noqa: E501
        'disable_authn_context_check': 'disableAuthnContextCheck',  # noqa: E501
        'disable_destination_check': 'disableDestinationCheck',  # noqa: E501
        'disable_inbound_logout': 'disableInboundLogout',  # noqa: E501
        'disable_in_response_to_check': 'disableInResponseToCheck',  # noqa: E501
        'disable_pending_logout_check': 'disablePendingLogoutCheck',  # noqa: E501
        'disable_recipient_check': 'disableRecipientCheck',  # noqa: E501
        'disable_time_period_check': 'disableTimePeriodCheck',  # noqa: E501
        'display_name': 'displayName',  # noqa: E501
        'domain_attribute': 'domainAttribute',  # noqa: E501
        'enable_detailed_log': 'enableDetailedLog',  # noqa: E501
        'enable_slo': 'enableSLO',  # noqa: E501
        'force_authentication': 'forceAuthentication',  # noqa: E501
        'identity_provider_id': 'identityProviderId',  # noqa: E501
        'logout_request_life_time': 'logoutRequestLifeTime',  # noqa: E501
        'name': 'name',  # noqa: E501
        'override_pending_authn_request': 'overridePendingAuthnRequest',  # noqa: E501
        'public_certificate': 'publicCertificate',  # noqa: E501
        'sign_authn_request': 'signAuthnRequest',  # noqa: E501
        'sign_logout_request': 'signLogoutRequest',  # noqa: E501
        'sign_logout_response': 'signLogoutResponse',  # noqa: E501
        'single_logout_service_response_url': 'singleLogoutServiceResponseUrl',  # noqa: E501
        'single_logout_service_url': 'singleLogoutServiceUrl',  # noqa: E501
        'sso_service_binding': 'ssoServiceBinding',  # noqa: E501
        'sso_service_url': 'ssoServiceUrl',  # noqa: E501
        'username_attribute': 'usernameAttribute',  # noqa: E501
        'want_assertion_encrypted': 'wantAssertionEncrypted',  # noqa: E501
        'want_assertion_or_response_signed': 'wantAssertionOrResponseSigned',  # noqa: E501
        'want_assertion_signed': 'wantAssertionSigned',  # noqa: E501
        'want_logout_request_signed': 'wantLogoutRequestSigned',  # noqa: E501
        'want_logout_response_signed': 'wantLogoutResponseSigned',  # noqa: E501
        'want_saml_response_signed': 'wantSAMLResponseSigned',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """ConfigurationSamlIdentityProviderModel - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            active (bool): Active status of the Identity Provider. Users can only log-in via an active Identity Provider.. [optional]  # noqa: E501
            authn_context (bool, date, datetime, dict, float, int, list, str, none_type): When specified, instructs the IDP on how to authenticate the user(optional).. [optional]  # noqa: E501
            clock_skew (bool, date, datetime, dict, float, int, list, str, none_type): The allowed number of minutes of difference between Secret Server's clock and the IDP's clock.  The default is 3 minutes.. [optional]  # noqa: E501
            description (bool, date, datetime, dict, float, int, list, str, none_type): Description of the Identity Provider.. [optional]  # noqa: E501
            disable_assertion_replay_check (bool): When true, SAML messages that were already received from this IDP will be allowed by Secret Server.  Otherwise, resending messages from the IDP will trigger an error.. [optional]  # noqa: E501
            disable_audience_restriction_check (bool): A SAML assertion may include an audience restriction URI. This identifies the intended recipient of the SAML assertion. If included it should match the service provider's name.  When this setting is true, this check is skipped.. [optional]  # noqa: E501
            disable_authn_context_check (bool): Disables the authentication context check, which validates that the real authentication method matches the ExpectedAuthnContext method.. [optional]  # noqa: E501
            disable_destination_check (bool): When true, the destination URI in the SAML response will not be validated.. [optional]  # noqa: E501
            disable_inbound_logout (bool): When true, logout requests coming from this IDP are ignored.. [optional]  # noqa: E501
            disable_in_response_to_check (bool): When true, the InResponseTo attribute in SAML messages is not checked.. [optional]  # noqa: E501
            disable_pending_logout_check (bool): When true, a SAML logout response will be considered legitimate even if there was no corresponding logout request.. [optional]  # noqa: E501
            disable_recipient_check (bool): When true, the built-in check against the AssertionConsumerService URL will be skipped.. [optional]  # noqa: E501
            disable_time_period_check (bool): When true, a SAML response is valid regardless of when it was sent.. [optional]  # noqa: E501
            display_name (bool, date, datetime, dict, float, int, list, str, none_type): The Display Name for the Identity Provider.. [optional]  # noqa: E501
            domain_attribute (bool, date, datetime, dict, float, int, list, str, none_type): Optional AttributeName to use for matching a Secret Server user's domain.. [optional]  # noqa: E501
            enable_detailed_log (bool): When true, a more detailed log will be generated for SAML logins and logouts.. [optional]  # noqa: E501
            enable_slo (bool): When true, logging out of Secret Server will log the user out of this Identity Provider.. [optional]  # noqa: E501
            force_authentication (bool): When true, the Identity Provider will be instructed to re-authenticate the user, even if they are already authenticated.. [optional]  # noqa: E501
            identity_provider_id (bool, date, datetime, dict, float, int, list, str, none_type): SAML Identity Provider Id. [optional]  # noqa: E501
            logout_request_life_time (bool, date, datetime, dict, float, int, list, str, none_type): The logout request life time.. [optional]  # noqa: E501
            name (bool, date, datetime, dict, float, int, list, str, none_type): Name of the Identity Provider.. [optional]  # noqa: E501
            override_pending_authn_request (bool): When true, an in-progress SP-initiated login may be interrupted by an IDP-initiated login.. [optional]  # noqa: E501
            public_certificate (bool, date, datetime, dict, float, int, list, str, none_type): The public certificate for the Identity Provider. Base64 encoded. [optional]  # noqa: E501
            sign_authn_request (bool): When true, the authentication requests sent to this IDP will be signed.. [optional]  # noqa: E501
            sign_logout_request (bool): When true, logout requests sent to this IDP will be signed.<. [optional]  # noqa: E501
            sign_logout_response (bool): When true, logout responses sent to this IDP will be signed.. [optional]  # noqa: E501
            single_logout_service_response_url (bool, date, datetime, dict, float, int, list, str, none_type): The URL where Secret Server will send responses to single logout messages.. [optional]  # noqa: E501
            single_logout_service_url (bool, date, datetime, dict, float, int, list, str, none_type): The URL to send the single logout message to.. [optional]  # noqa: E501
            sso_service_binding (bool, date, datetime, dict, float, int, list, str, none_type): Method for communicating with the Identity Provider.  HTTPRedirect is recommended in most cases.. [optional]  # noqa: E501
            sso_service_url (bool, date, datetime, dict, float, int, list, str, none_type): The URL of the Identity Provider where the user will be sent to authenticate.. [optional]  # noqa: E501
            username_attribute (bool, date, datetime, dict, float, int, list, str, none_type): Optional AttributeName to use for matching a Secret Server user.. [optional]  # noqa: E501
            want_assertion_encrypted (bool): When true, Secret Server will expect SAML assertions from this IDP to be encrypted. Unencrypted assertions or assertions that cannot be decrypted will cause an error.. [optional]  # noqa: E501
            want_assertion_or_response_signed (bool): When true, Secret Server will expect either SAML assertions or SAML responses from this IDP to be signed. Unsigned assertions/responses and assertions/responses whose signatures cannot be verified will cause an error.. [optional]  # noqa: E501
            want_assertion_signed (bool): When true, Secret Server will expect SAML assertions from this IDP to be signed. Unsigned assertions or assertions whose signatures cannot be verified will cause an error.. [optional]  # noqa: E501
            want_logout_request_signed (bool): When true, Secret Server will expect logout requests from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error.. [optional]  # noqa: E501
            want_logout_response_signed (bool): When true, Secret Server will expect logout responses from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error.. [optional]  # noqa: E501
            want_saml_response_signed (bool): When true, Secret Server will expect SAML responses from this IDP to be signed. Unsigned responses or responses whose signatures cannot be verified will cause an error.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """ConfigurationSamlIdentityProviderModel - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            active (bool): Active status of the Identity Provider. Users can only log-in via an active Identity Provider.. [optional]  # noqa: E501
            authn_context (bool, date, datetime, dict, float, int, list, str, none_type): When specified, instructs the IDP on how to authenticate the user(optional).. [optional]  # noqa: E501
            clock_skew (bool, date, datetime, dict, float, int, list, str, none_type): The allowed number of minutes of difference between Secret Server's clock and the IDP's clock.  The default is 3 minutes.. [optional]  # noqa: E501
            description (bool, date, datetime, dict, float, int, list, str, none_type): Description of the Identity Provider.. [optional]  # noqa: E501
            disable_assertion_replay_check (bool): When true, SAML messages that were already received from this IDP will be allowed by Secret Server.  Otherwise, resending messages from the IDP will trigger an error.. [optional]  # noqa: E501
            disable_audience_restriction_check (bool): A SAML assertion may include an audience restriction URI. This identifies the intended recipient of the SAML assertion. If included it should match the service provider's name.  When this setting is true, this check is skipped.. [optional]  # noqa: E501
            disable_authn_context_check (bool): Disables the authentication context check, which validates that the real authentication method matches the ExpectedAuthnContext method.. [optional]  # noqa: E501
            disable_destination_check (bool): When true, the destination URI in the SAML response will not be validated.. [optional]  # noqa: E501
            disable_inbound_logout (bool): When true, logout requests coming from this IDP are ignored.. [optional]  # noqa: E501
            disable_in_response_to_check (bool): When true, the InResponseTo attribute in SAML messages is not checked.. [optional]  # noqa: E501
            disable_pending_logout_check (bool): When true, a SAML logout response will be considered legitimate even if there was no corresponding logout request.. [optional]  # noqa: E501
            disable_recipient_check (bool): When true, the built-in check against the AssertionConsumerService URL will be skipped.. [optional]  # noqa: E501
            disable_time_period_check (bool): When true, a SAML response is valid regardless of when it was sent.. [optional]  # noqa: E501
            display_name (bool, date, datetime, dict, float, int, list, str, none_type): The Display Name for the Identity Provider.. [optional]  # noqa: E501
            domain_attribute (bool, date, datetime, dict, float, int, list, str, none_type): Optional AttributeName to use for matching a Secret Server user's domain.. [optional]  # noqa: E501
            enable_detailed_log (bool): When true, a more detailed log will be generated for SAML logins and logouts.. [optional]  # noqa: E501
            enable_slo (bool): When true, logging out of Secret Server will log the user out of this Identity Provider.. [optional]  # noqa: E501
            force_authentication (bool): When true, the Identity Provider will be instructed to re-authenticate the user, even if they are already authenticated.. [optional]  # noqa: E501
            identity_provider_id (bool, date, datetime, dict, float, int, list, str, none_type): SAML Identity Provider Id. [optional]  # noqa: E501
            logout_request_life_time (bool, date, datetime, dict, float, int, list, str, none_type): The logout request life time.. [optional]  # noqa: E501
            name (bool, date, datetime, dict, float, int, list, str, none_type): Name of the Identity Provider.. [optional]  # noqa: E501
            override_pending_authn_request (bool): When true, an in-progress SP-initiated login may be interrupted by an IDP-initiated login.. [optional]  # noqa: E501
            public_certificate (bool, date, datetime, dict, float, int, list, str, none_type): The public certificate for the Identity Provider. Base64 encoded. [optional]  # noqa: E501
            sign_authn_request (bool): When true, the authentication requests sent to this IDP will be signed.. [optional]  # noqa: E501
            sign_logout_request (bool): When true, logout requests sent to this IDP will be signed.<. [optional]  # noqa: E501
            sign_logout_response (bool): When true, logout responses sent to this IDP will be signed.. [optional]  # noqa: E501
            single_logout_service_response_url (bool, date, datetime, dict, float, int, list, str, none_type): The URL where Secret Server will send responses to single logout messages.. [optional]  # noqa: E501
            single_logout_service_url (bool, date, datetime, dict, float, int, list, str, none_type): The URL to send the single logout message to.. [optional]  # noqa: E501
            sso_service_binding (bool, date, datetime, dict, float, int, list, str, none_type): Method for communicating with the Identity Provider.  HTTPRedirect is recommended in most cases.. [optional]  # noqa: E501
            sso_service_url (bool, date, datetime, dict, float, int, list, str, none_type): The URL of the Identity Provider where the user will be sent to authenticate.. [optional]  # noqa: E501
            username_attribute (bool, date, datetime, dict, float, int, list, str, none_type): Optional AttributeName to use for matching a Secret Server user.. [optional]  # noqa: E501
            want_assertion_encrypted (bool): When true, Secret Server will expect SAML assertions from this IDP to be encrypted. Unencrypted assertions or assertions that cannot be decrypted will cause an error.. [optional]  # noqa: E501
            want_assertion_or_response_signed (bool): When true, Secret Server will expect either SAML assertions or SAML responses from this IDP to be signed. Unsigned assertions/responses and assertions/responses whose signatures cannot be verified will cause an error.. [optional]  # noqa: E501
            want_assertion_signed (bool): When true, Secret Server will expect SAML assertions from this IDP to be signed. Unsigned assertions or assertions whose signatures cannot be verified will cause an error.. [optional]  # noqa: E501
            want_logout_request_signed (bool): When true, Secret Server will expect logout requests from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error.. [optional]  # noqa: E501
            want_logout_response_signed (bool): When true, Secret Server will expect logout responses from this IDP to be signed.  Unsigned responses or responses whose signatures cannot be verified will cause an error.. [optional]  # noqa: E501
            want_saml_response_signed (bool): When true, Secret Server will expect SAML responses from this IDP to be signed. Unsigned responses or responses whose signatures cannot be verified will cause an error.. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
